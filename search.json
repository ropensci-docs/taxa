[{"path":"https://docs.ropensci.org/taxa/CODE_OF_CONDUCT.html","id":null,"dir":"","previous_headings":"","what":"Contributor Code of Conduct","title":"Contributor Code of Conduct","text":"contributors maintainers project, pledge respect people contribute reporting issues, posting feature requests, updating documentation, submitting pull requests patches, activities. committed making participation project harassment-free experience everyone, regardless level experience, gender, gender identity expression, sexual orientation, disability, personal appearance, body size, race, ethnicity, age, religion. Examples unacceptable behavior participants include use sexual language imagery, derogatory comments personal attacks, trolling, public private harassment, insults, unprofessional conduct. Project maintainers right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct. Project maintainers follow Code Conduct may removed project team. Instances abusive, harassing, otherwise unacceptable behavior may reported opening issue contacting one project maintainers. Code Conduct adapted Contributor Covenant (http:contributor-covenant.org), version 1.0.0, available http://contributor-covenant.org/version/1/0/0/","code":""},{"path":[]},{"path":"https://docs.ropensci.org/taxa/CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"https://docs.ropensci.org/taxa/CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"https://docs.ropensci.org/taxa/CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"https://docs.ropensci.org/taxa/CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"https://docs.ropensci.org/taxa/CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported opening issue contacting one project maintainers. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"https://docs.ropensci.org/taxa/CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.0, available https://www.contributor-covenant.org/version/2/0/code_of_conduct.html. Community Impact Guidelines inspired Mozilla’s code conduct enforcement ladder. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https://www.contributor-covenant.org/translations.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/taxa/CONTRIBUTING.html","id":"bugs","dir":"","previous_headings":"","what":"Bugs?","title":"CONTRIBUTING","text":"Submit issue Issues page","code":""},{"path":"https://docs.ropensci.org/taxa/CONTRIBUTING.html","id":"code-contributions","dir":"","previous_headings":"","what":"Code contributions","title":"CONTRIBUTING","text":"Fork repo Github account Clone version account machine account, e.g,. git clone https://github.com/<yourgithubusername>/taxa.git Make sure track progress upstream (.e., version taxa ropensci/taxa) git remote add upstream https://github.com/ropensci/taxa.git. making changes make sure pull changes upstream either git fetch upstream merge later git pull upstream fetch merge one step Make changes (bonus points making changes new feature branch) Push account Submit pull request home base ropensci/taxa","code":""},{"path":[]},{"path":"https://docs.ropensci.org/taxa/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Scott Chamberlain. Author. Zachary Foster. Author, maintainer.","code":""},{"path":"https://docs.ropensci.org/taxa/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Zachary F, Scott C, Niklaus G (2018). Taxa: R package implementing data standards methods taxonomic data., volume 7 number 272. doi:10.12688/f1000research.14013.1.","code":"@Manual{,   title = {Taxa: An R package implementing data standards and methods for taxonomic data.},   author = {Foster Zachary and Chamberlain Scott and Grunwald Niklaus},   journal = {F1000Research},   year = {2018},   volume = {7},   number = {272},   doi = {10.12688/f1000research.14013.1}, }"},{"path":[]},{"path":"https://docs.ropensci.org/taxa/code_of_conduct.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"https://docs.ropensci.org/taxa/code_of_conduct.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"https://docs.ropensci.org/taxa/code_of_conduct.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"https://docs.ropensci.org/taxa/code_of_conduct.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"https://docs.ropensci.org/taxa/code_of_conduct.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported opening issue contacting one project maintainers. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"https://docs.ropensci.org/taxa/code_of_conduct.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.0, available https://www.contributor-covenant.org/version/2/0/code_of_conduct.html. Community Impact Guidelines inspired Mozilla’s code conduct enforcement ladder. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https://www.contributor-covenant.org/translations.","code":""},{"path":"https://docs.ropensci.org/taxa/index.html","id":"taxa","dir":"","previous_headings":"","what":"Classes for Storing and Manipulating Taxonomic Data","title":"Classes for Storing and Manipulating Taxonomic Data","text":"R package provides classes store manipulate taxonomic data. classes can used like base R vectors. project partial rewrite previous version taxa currently development. note recent changes: beginning complete rewrite previous taxa package make basic component classes like base R vectors. taxmap class yet reimplemented, similar class previous versions taxa. old version taxa incorporated metacoder package version taxa mature, time metacoder also use version.","code":""},{"path":"https://docs.ropensci.org/taxa/index.html","id":"contributors","dir":"","previous_headings":"","what":"Contributors","title":"Classes for Storing and Manipulating Taxonomic Data","text":"Zachary Foster Scott Chamberlain","code":""},{"path":"https://docs.ropensci.org/taxa/index.html","id":"comments-and-contributions","dir":"","previous_headings":"","what":"Comments and contributions","title":"Classes for Storing and Manipulating Taxonomic Data","text":"welcome comments, criticisms, especially contributions! GitHub issues preferred way report bugs, ask questions, request new features. can submit issues : https://github.com/ropensci/taxa/issues","code":""},{"path":"https://docs.ropensci.org/taxa/index.html","id":"meta","dir":"","previous_headings":"","what":"Meta","title":"Classes for Storing and Manipulating Taxonomic Data","text":"Please report issues bugs. License: MIT Get citation information taxa R citation(package = 'taxa') Please note project released Contributor Code Conduct (see CONDUCT.md). participating project agree abide terms.","code":""},{"path":[]},{"path":[]},{"path":[]},{"path":"https://docs.ropensci.org/taxa/reference/as_data_frame.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a taxa object to a data.frame — as_data_frame","title":"Convert a taxa object to a data.frame — as_data_frame","text":"Convert information taxa object data.frame using base R vectors columns. Use as_tibble convert tibbles.","code":""},{"path":"https://docs.ropensci.org/taxa/reference/as_data_frame.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a taxa object to a data.frame — as_data_frame","text":"","code":"as_data_frame(   x,   row.names = NULL,   optional = FALSE,   ...,   stringsAsFactors = FALSE )"},{"path":"https://docs.ropensci.org/taxa/reference/as_data_frame.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a taxa object to a data.frame — as_data_frame","text":"x object defined taxa, taxon taxon_id row.names NULL character vector giving row     names data frame.  Missing values allowed. optional logical. TRUE, setting row names     converting column names (syntactic names: see     make.names) optional.  Note R's     base package .data.frame() methods use     optional column names treatment, basically     meaning data.frame(*, check.names = !optional).     See also make.names argument matrix method. ... additional arguments passed methods. stringsAsFactors logical: character vector converted     factor?","code":""},{"path":"https://docs.ropensci.org/taxa/reference/as_data_frame.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert a taxa object to a data.frame — as_data_frame","text":"","code":"x <- taxon(name = c('Homo sapiens', 'Bacillus', 'Ascomycota', 'Ericaceae'),            rank = c('species', 'genus', 'phylum', 'family'),            id = taxon_id(c('9606', '1386', '4890', '4345'), db = 'ncbi'),            auth = c('Linnaeus, 1758', 'Cohn 1872', NA, 'Juss., 1789')) as_data_frame(x) #>       tax_name tax_rank tax_id tax_db tax_author tax_date tax_cite #> 1 Homo sapiens  species   9606   ncbi   Linnaeus     1758          #> 2     Bacillus    genus   1386   ncbi       Cohn     1872          #> 3   Ascomycota   phylum   4890   ncbi       <NA>                   #> 4    Ericaceae   family   4345   ncbi      Juss.     1789"},{"path":"https://docs.ropensci.org/taxa/reference/as_taxon.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert to a taxon vector — as_taxon","title":"Convert to a taxon vector — as_taxon","text":"Convert objects taxon vectors. Compatible base R vectors can also converted using taxon constructor.","code":""},{"path":"https://docs.ropensci.org/taxa/reference/as_taxon.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert to a taxon vector — as_taxon","text":"","code":"as_taxon(x, ...)"},{"path":"https://docs.ropensci.org/taxa/reference/as_taxon.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert to a taxon vector — as_taxon","text":"x object converted taxon vector ... Additional parameters.","code":""},{"path":"https://docs.ropensci.org/taxa/reference/as_taxon.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert to a taxon vector — as_taxon","text":"","code":"# Convert a taxonomy object to a taxon vector x <- taxonomy(taxon(name = c('Carnivora', 'Felidae', 'Panthera', 'Panthera leo',                              'Panthera tigris', 'Ursidae', 'Ursus', 'Ursus arctos'),                     rank = c('order', 'family', 'genus', 'species',                              'species', 'family', 'genus', 'species'),                     id = taxon_id(c('33554', '9681', '9688', '9689',                                     '9694', '9632', '9639', '9644'),                                   db = 'ncbi'),                     auth = c('Bowdich, 1821', 'Fischer de Waldheim, 1817', 'Oken, 1816', 'L., 1758',                              'L., 1758', 'Fischer de Waldheim, 1817', 'L., 1758', 'L., 1758')),               supertaxa = c(NA, 1, 2, 3, 3, 1, 6, 7)) names(x) <- letters[1:8] as_taxon(x) #> <taxon[8]> #>                                            a  #>           33554|Carnivora Bowdich 1821|order  #>                                            b  #> 9681|Felidae Fischer de Waldheim 1817|family  #>                                            c  #>                9688|Panthera Oken 1816|genus  #>                                            d  #>            9689|Panthera leo L. 1758|species  #>                                            e  #>         9694|Panthera tigris L. 1758|species  #>                                            f  #> 9632|Ursidae Fischer de Waldheim 1817|family  #>                                            g  #>                     9639|Ursus L. 1758|genus  #>                                            h  #>            9644|Ursus arctos L. 1758|species  #> Rank levels: order < family < genus < species  # Convert base R vectors as_taxon(c('Carnivora', 'Felidae', 'Panthera', 'Panthera leo')) #> <taxon[4]> #> [1] Carnivora    Felidae      Panthera     Panthera leo as_taxon(factor(c('Carnivora', 'Felidae', 'Panthera', 'Panthera leo'))) #> <taxon[4]> #> [1] Carnivora    Felidae      Panthera     Panthera leo"},{"path":"https://docs.ropensci.org/taxa/reference/check_taxon_rank_order.html","id":null,"dir":"Reference","previous_headings":"","what":"Check that order is ascending — check_taxon_rank_order","title":"Check that order is ascending — check_taxon_rank_order","text":"Check order ascending reorder orders levels needed.","code":""},{"path":"https://docs.ropensci.org/taxa/reference/check_taxon_rank_order.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check that order is ascending — check_taxon_rank_order","text":"","code":"check_taxon_rank_order(level, order, warn = FALSE)"},{"path":"https://docs.ropensci.org/taxa/reference/check_taxon_rank_order.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check that order is ascending — check_taxon_rank_order","text":"level Zero taxonomic rank names. order Integers determine relative order taxonomic levels. warn TRUE, issue warning ascending order.","code":""},{"path":"https://docs.ropensci.org/taxa/reference/classification.html","id":null,"dir":"Reference","previous_headings":"","what":"Taxon class — classification","title":"Taxon class — classification","text":"Used store classifications reference taxonomic tree.","code":""},{"path":"https://docs.ropensci.org/taxa/reference/classification.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Taxon class — classification","text":"","code":"classification(x = NULL, taxonomy = NULL, .names = NULL)"},{"path":"https://docs.ropensci.org/taxa/reference/classification.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Taxon class — classification","text":"x One : list item represents series nested taxa. contents list can form can converted taxon vector. indexes/names instance taxon taxonomy object specified taxonomy option. Can length, must consist valid indexes taxa taxonomy object. taxonomy taxonomy object. needed taxon indexes supplied first argument. .names names vector.","code":""},{"path":"https://docs.ropensci.org/taxa/reference/classification.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Taxon class — classification","text":"S3 object class taxa_classification","code":""},{"path":[]},{"path":"https://docs.ropensci.org/taxa/reference/classification.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Taxon class — classification","text":"","code":"# Create classification vector with a list x <- classification(list(   c('Carnivora', 'Felidae', 'Panthera', 'Panthera leo'),   c('Carnivora', 'Felidae', 'Panthera', 'Panthera tigris'),   c('Carnivora', 'Ursidae', 'Ursus', 'Ursus arctos'),   c('Carnivora', 'Ursidae', 'Ursus', 'Ursus arctos'),   c('Carnivora', 'Felidae', 'Panthera', 'Panthera tigris') ))   # Create classification vector with indexes and a taxonomy x <- classification(c(3, 4, 4, 5, 5, 6, 8, 8, 2, 5, 6, 2),                     taxonomy(c('Carnivora', 'Felidae', 'Panthera', 'Panthera leo',                                'Panthera tigris', 'Ursidae', 'Ursus', 'Ursus arctos'),                              supertaxa = c(NA, 1, 2, 3, 3, 1, 6, 7)))  x <- classification(c(3, 4, 4, 5, 5, 6, 8, 8, 2, 5, 6, 2),                     taxonomy(taxon(name = c('Carnivora', 'Felidae', 'Panthera', 'Panthera leo',                                             'Panthera tigris', 'Ursidae', 'Ursus', 'Ursus arctos'),                                    rank = c('order', 'family', 'genus', 'species',                                             'species', 'family', 'genus', 'species'),                                    id = taxon_id(c('33554', '9681', '9688', '9689',                                                    '9694', '9632', '9639', '9644'),                                                  db = 'ncbi'),                                    auth = c('Bowdich, 1821', 'Fischer, 1817',                                             'Oken, 1816', 'L., 1758',                                             'L., 1758', 'Fischer, 1817',                                             'L., 1758', 'L., 1758')),                              supertaxa = c(NA, 1, 2, 3, 3, 1, 6, 7))) names(x) <- letters[1:12]   # Get parts of the classification vector tax_name(x) #>                 a                 b                 c                 d  #>        \"Panthera\"    \"Panthera leo\"    \"Panthera leo\" \"Panthera tigris\"  #>                 e                 f                 g                 h  #> \"Panthera tigris\"         \"Ursidae\"    \"Ursus arctos\"    \"Ursus arctos\"  #>                 i                 j                 k                 l  #>         \"Felidae\" \"Panthera tigris\"         \"Ursidae\"         \"Felidae\"  tax_rank(x) #> <taxon_rank[12]> #>       a       b       c       d       e       f       g       h       i       j  #>   genus species species species species  family species species  family species  #>       k       l  #>  family  family  #> Rank levels: order < family < genus < species tax_id(x) #> <taxon_id[12]> #>           a           b           c           d           e           f  #> 9688 (ncbi) 9689 (ncbi) 9689 (ncbi) 9694 (ncbi) 9694 (ncbi) 9632 (ncbi)  #>           g           h           i           j           k           l  #> 9644 (ncbi) 9644 (ncbi) 9681 (ncbi) 9694 (ncbi) 9632 (ncbi) 9681 (ncbi)  tax_db(x) #> <taxon_db[12]> #>    a    b    c    d    e    f    g    h    i    j    k    l  #> ncbi ncbi ncbi ncbi ncbi ncbi ncbi ncbi ncbi ncbi ncbi ncbi  tax_auth(x) #> <taxon_authority[12]> #>            a            b            c            d            e            f  #>    Oken 1816      L. 1758      L. 1758      L. 1758      L. 1758 Fischer 1817  #>            g            h            i            j            k            l  #>      L. 1758      L. 1758 Fischer 1817      L. 1758 Fischer 1817 Fischer 1817  tax_author(x) #>         a         b         c         d         e         f         g         h  #>    \"Oken\"      \"L.\"      \"L.\"      \"L.\"      \"L.\" \"Fischer\"      \"L.\"      \"L.\"  #>         i         j         k         l  #> \"Fischer\"      \"L.\" \"Fischer\" \"Fischer\"  tax_date(x) #>      a      b      c      d      e      f      g      h      i      j      k  #> \"1816\" \"1758\" \"1758\" \"1758\" \"1758\" \"1817\" \"1758\" \"1758\" \"1817\" \"1758\" \"1817\"  #>      l  #> \"1817\"  tax_cite(x) #>  a  b  c  d  e  f  g  h  i  j  k  l  #> \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\"   # Manipulate classification vectors x[1:3] #> <classification[3]> #>                                       a                                       b  #>              Carnivora|Felidae|Panthera Carnivora|Felidae|Panthera|Panthera leo  #>                                       c  #> Carnivora|Felidae|Panthera|Panthera leo  #> Rank levels: order < family < genus < species x[tax_rank(x) > 'family'] #> <classification[8]> #>                                          a  #>                 Carnivora|Felidae|Panthera  #>                                          b  #>    Carnivora|Felidae|Panthera|Panthera leo  #>                                          c  #>    Carnivora|Felidae|Panthera|Panthera leo  #>                                          d  #> Carnivora|Felidae|Panthera|Panthera tigris  #>                                          e  #> Carnivora|Felidae|Panthera|Panthera tigris  #>                                          g  #>       Carnivora|Ursidae|Ursus|Ursus arctos  #>                                          h  #>       Carnivora|Ursidae|Ursus|Ursus arctos  #>                                          j  #> Carnivora|Felidae|Panthera|Panthera tigris  #> Rank levels: order < family < genus < species # c(x, x) # x['b'] <- NA is.na(x) #>  [1] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE # as.data.frame(x) # tibble::as_tibble(x)  # Use as columns in tables tibble::tibble(x = x, y = 1:12) #> # A tibble: 12 × 2 #>    x                                              y #>    <classif>                                  <int> #>  1 Carnivora|Felidae|Panthera                     1 #>  2 Carnivora|Felidae|Panthera|Panthera leo        2 #>  3 Carnivora|Felidae|Panthera|Panthera leo        3 #>  4 Carnivora|Felidae|Panthera|Panthera tigris     4 #>  5 Carnivora|Felidae|Panthera|Panthera tigris     5 #>  6 Carnivora|Ursidae                              6 #>  7 Carnivora|Ursidae|Ursus|Ursus arctos           7 #>  8 Carnivora|Ursidae|Ursus|Ursus arctos           8 #>  9 Carnivora|Felidae                              9 #> 10 Carnivora|Felidae|Panthera|Panthera tigris    10 #> 11 Carnivora|Ursidae                             11 #> 12 Carnivora|Felidae                             12 data.frame(x = x, y = 1:12) #>                                             x  y #> 1                  Carnivora|Felidae|Panthera  1 #> 2     Carnivora|Felidae|Panthera|Panthera leo  2 #> 3     Carnivora|Felidae|Panthera|Panthera leo  3 #> 4  Carnivora|Felidae|Panthera|Panthera tigris  4 #> 5  Carnivora|Felidae|Panthera|Panthera tigris  5 #> 6                           Carnivora|Ursidae  6 #> 7        Carnivora|Ursidae|Ursus|Ursus arctos  7 #> 8        Carnivora|Ursidae|Ursus|Ursus arctos  8 #> 9                           Carnivora|Felidae  9 #> 10 Carnivora|Felidae|Panthera|Panthera tigris 10 #> 11                          Carnivora|Ursidae 11 #> 12                          Carnivora|Felidae 12"},{"path":"https://docs.ropensci.org/taxa/reference/contains.html","id":null,"dir":"Reference","previous_headings":"","what":"dplyr select_helpers — contains","title":"dplyr select_helpers — contains","text":"dplyr select_helpers","code":""},{"path":"https://docs.ropensci.org/taxa/reference/database_ref.html","id":null,"dir":"Reference","previous_headings":"","what":"Database list — database_ref","title":"Database list — database_ref","text":"list known databases.","code":""},{"path":"https://docs.ropensci.org/taxa/reference/database_ref.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Database list — database_ref","text":"","code":"database_ref"},{"path":"https://docs.ropensci.org/taxa/reference/database_ref.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Database list — database_ref","text":"object class taxa_taxon_db_def (inherits vctrs_rcrd, vctrs_vctr) length 8.","code":""},{"path":"https://docs.ropensci.org/taxa/reference/db_ref.html","id":null,"dir":"Reference","previous_headings":"","what":"Valid taxonomy databases — db_ref","title":"Valid taxonomy databases — db_ref","text":"defines valid taxonomic databases can used taxon_db objects objects use taxon_db objects, taxon_id taxon. db_ref$get can used see information databases. Users can add custom databases list using db_ref$set. database following information included: URL website associated database short description regular expression defines valid taxon IDs ranks used database specified","code":""},{"path":"https://docs.ropensci.org/taxa/reference/db_ref.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Valid taxonomy databases — db_ref","text":"","code":"db_ref"},{"path":"https://docs.ropensci.org/taxa/reference/db_ref.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Valid taxonomy databases — db_ref","text":"object class list length 3.","code":""},{"path":"https://docs.ropensci.org/taxa/reference/db_ref.html","id":"attribution","dir":"Reference","previous_headings":"","what":"Attribution","title":"Valid taxonomy databases — db_ref","text":"code based code handling options knitr package.","code":""},{"path":"https://docs.ropensci.org/taxa/reference/db_ref.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Valid taxonomy databases — db_ref","text":"","code":"# List all database definitions db_ref$get() #> <taxon_db_def[8]> #>    _____________________ ncbi ______________________ #>    url:         http://www.ncbi.nlm.nih.gov/taxonomy #>    desc:        NCBI Taxonomy Database               #>    id_regex:    [0-9]+                               #>    rank_levels:                                      #>  #>    _____________________________ gbif _____________________________ #>    url:         http://www.gbif.org/developer/species               #>    desc:        GBIF Taxonomic Backbone                             #>    id_regex:    [0-9]+                                              #>    rank_levels: kingdom < phylum < order < family < genus < species #>  #>    _________________________________ bold _________________________________ #>    url:         http://www.boldsystems.org                                  #>    desc:        Barcode of Life                                             #>    id_regex:    [0-9]+                                                      #>    rank_levels: phylum < class < order < family < subfamily < genus < spec… #>  #>    ___________________ col ___________________ #>    url:         http://www.catalogueoflife.org #>    desc:        Catalogue of Life              #>    id_regex:    [a-z0-9]{32}                   #>    rank_levels:                                #>  #>    ______________ eol ______________ #>    url:         http://eol.org       #>    desc:        Encyclopedia of Life #>    id_regex:    [0-9]+               #>    rank_levels:                      #>  #>    ____________________ nbn ____________________ #>    url:         https://nbn.org.uk               #>    desc:        UK National Biodiversity Network #>    id_regex:    [A-Z]{5}[0-9]{10}                #>    rank_levels:                                  #>  #>    ________________ tps ________________ #>    url:         http://www.tropicos.org/ #>    desc:        Tropicos                 #>    id_regex:    [0-9]+                   #>    rank_levels:                          #>  #>    _______________________ itis _______________________ #>    url:         http://www.itis.gov                     #>    desc:        Integrated Taxonomic Information System #>    id_regex:    [0-9]+                                  #>    rank_levels:                                          # Get a specific database definition db_ref$get('ncbi') #> <taxon_db_def[1]> #>    _____________________ ncbi ______________________ #>    url:         http://www.ncbi.nlm.nih.gov/taxonomy #>    desc:        NCBI Taxonomy Database               #>    id_regex:    [0-9]+                               #>    rank_levels:                                       # Add or overwrite a database definition db_ref$set(   name = \"my_new_database\",   url = \"http://www.my_tax_database.com\",   desc = \"I just made this up\",   id_regex = \".*\" )  # Reset definitions to default values db_ref$reset()"},{"path":"https://docs.ropensci.org/taxa/reference/default_db_ref.html","id":null,"dir":"Reference","previous_headings":"","what":"Defines valid taxonomic databases — default_db_ref","title":"Defines valid taxonomic databases — default_db_ref","text":"Defines valid taxonomic databases","code":""},{"path":"https://docs.ropensci.org/taxa/reference/default_db_ref.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Defines valid taxonomic databases — default_db_ref","text":"","code":"default_db_ref(defaults = list())"},{"path":"https://docs.ropensci.org/taxa/reference/default_db_ref.html","id":"attribution","dir":"Reference","previous_headings":"","what":"Attribution","title":"Defines valid taxonomic databases — default_db_ref","text":"code copied code handling options knitr package.","code":""},{"path":"https://docs.ropensci.org/taxa/reference/delete_unused_class_taxa.html","id":null,"dir":"Reference","previous_headings":"","what":"Removes taxa from the taxonomy of a classification that are not used by any of the instances — delete_unused_class_taxa","title":"Removes taxa from the taxonomy of a classification that are not used by any of the instances — delete_unused_class_taxa","text":"Removes taxa taxonomy classification used instances","code":""},{"path":"https://docs.ropensci.org/taxa/reference/delete_unused_class_taxa.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Removes taxa from the taxonomy of a classification that are not used by any of the instances — delete_unused_class_taxa","text":"","code":"delete_unused_class_taxa(x)"},{"path":"https://docs.ropensci.org/taxa/reference/duplicated_index.html","id":null,"dir":"Reference","previous_headings":"","what":"Returns the index of the first occurrence of each unique element — duplicated_index","title":"Returns the index of the first occurrence of each unique element — duplicated_index","text":"Returns index first occurrence unique element","code":""},{"path":"https://docs.ropensci.org/taxa/reference/duplicated_index.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Returns the index of the first occurrence of each unique element — duplicated_index","text":"","code":"duplicated_index(x, proxy_func = NULL)"},{"path":"https://docs.ropensci.org/taxa/reference/duplicated_index_taxonomy.html","id":null,"dir":"Reference","previous_headings":"","what":"Returns the index of the first occurrence of each unique taxon in a taxonomy — duplicated_index_taxonomy","title":"Returns the index of the first occurrence of each unique taxon in a taxonomy — duplicated_index_taxonomy","text":"Returns index first occurrence unique taxon taxonomy","code":""},{"path":"https://docs.ropensci.org/taxa/reference/duplicated_index_taxonomy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Returns the index of the first occurrence of each unique taxon in a taxonomy — duplicated_index_taxonomy","text":"","code":"duplicated_index_taxonomy(x, proxy_func = NULL)"},{"path":"https://docs.ropensci.org/taxa/reference/ends_with.html","id":null,"dir":"Reference","previous_headings":"","what":"dplyr select_helpers — ends_with","title":"dplyr select_helpers — ends_with","text":"dplyr select_helpers","code":""},{"path":"https://docs.ropensci.org/taxa/reference/everything.html","id":null,"dir":"Reference","previous_headings":"","what":"dplyr select_helpers — everything","title":"dplyr select_helpers — everything","text":"dplyr select_helpers","code":""},{"path":"https://docs.ropensci.org/taxa/reference/font_default.html","id":null,"dir":"Reference","previous_headings":"","what":"Default font — font_default","title":"Default font — font_default","text":"wrapper make changing formatting text printed easier.","code":""},{"path":"https://docs.ropensci.org/taxa/reference/font_default.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Default font — font_default","text":"","code":"font_default(text)"},{"path":"https://docs.ropensci.org/taxa/reference/font_default.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Default font — font_default","text":"text print.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/taxa/reference/font_na.html","id":null,"dir":"Reference","previous_headings":"","what":"Font for NAs in print methods — font_na","title":"Font for NAs in print methods — font_na","text":"simple wrapper make changing formatting text printed easier. used NAs","code":""},{"path":"https://docs.ropensci.org/taxa/reference/font_na.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Font for NAs in print methods — font_na","text":"","code":"font_na(text)"},{"path":"https://docs.ropensci.org/taxa/reference/font_na.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Font for NAs in print methods — font_na","text":"text print","code":""},{"path":[]},{"path":"https://docs.ropensci.org/taxa/reference/font_punct.html","id":null,"dir":"Reference","previous_headings":"","what":"Punctuation formatting in print methods — font_punct","title":"Punctuation formatting in print methods — font_punct","text":"simple wrapper make changing formatting text printed easier. used non-data, formatting characters","code":""},{"path":"https://docs.ropensci.org/taxa/reference/font_punct.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Punctuation formatting in print methods — font_punct","text":"","code":"font_punct(text)"},{"path":"https://docs.ropensci.org/taxa/reference/font_punct.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Punctuation formatting in print methods — font_punct","text":"text print","code":""},{"path":[]},{"path":"https://docs.ropensci.org/taxa/reference/font_secondary.html","id":null,"dir":"Reference","previous_headings":"","what":"Font for secondary data — font_secondary","title":"Font for secondary data — font_secondary","text":"wrapper make changing formatting text printed easier. used print data associated data.","code":""},{"path":"https://docs.ropensci.org/taxa/reference/font_secondary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Font for secondary data — font_secondary","text":"","code":"font_secondary(text)"},{"path":"https://docs.ropensci.org/taxa/reference/font_secondary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Font for secondary data — font_secondary","text":"text print.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/taxa/reference/font_tax_name.html","id":null,"dir":"Reference","previous_headings":"","what":"Taxon name formatting in print methods — font_tax_name","title":"Taxon name formatting in print methods — font_tax_name","text":"simple wrapper make changing formatting text printed easier. used taxon names.","code":""},{"path":"https://docs.ropensci.org/taxa/reference/font_tax_name.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Taxon name formatting in print methods — font_tax_name","text":"","code":"font_tax_name(text)"},{"path":"https://docs.ropensci.org/taxa/reference/font_tax_name.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Taxon name formatting in print methods — font_tax_name","text":"text print","code":""},{"path":[]},{"path":"https://docs.ropensci.org/taxa/reference/grapes-greater-than-grapes.html","id":null,"dir":"Reference","previous_headings":"","what":"magrittr forward-pipe operator — %>%","title":"magrittr forward-pipe operator — %>%","text":"magrittr forward-pipe operator","code":""},{"path":"https://docs.ropensci.org/taxa/reference/grapes-in-grapes.html","id":null,"dir":"Reference","previous_headings":"","what":"Value matching for taxa package — %in%","title":"Value matching for taxa package — %in%","text":"wrapper base value matching %% used take consideration features taxa package.","code":""},{"path":"https://docs.ropensci.org/taxa/reference/grapes-in-grapes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Value matching for taxa package — %in%","text":"","code":"x %in% table"},{"path":"https://docs.ropensci.org/taxa/reference/grapes-in-grapes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Value matching for taxa package — %in%","text":"x vector NULL: values matched.     Long vectors supported. table vector NULL: values matched .     Long vectors supported.","code":""},{"path":"https://docs.ropensci.org/taxa/reference/impute_order_na.html","id":null,"dir":"Reference","previous_headings":"","what":"Fill in NA values in sequence — impute_order_na","title":"Fill in NA values in sequence — impute_order_na","text":"Fill NA values ascending sequence based nearby non-NA values. Used guess order values unknown ranks based values known ranks.","code":""},{"path":"https://docs.ropensci.org/taxa/reference/impute_order_na.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fill in NA values in sequence — impute_order_na","text":"","code":"impute_order_na(order, inc = 1)"},{"path":"https://docs.ropensci.org/taxa/reference/impute_order_na.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fill in NA values in sequence — impute_order_na","text":"order ascending sequences, possibly NAs inc increment size use values NA blocks start end sequence.","code":""},{"path":"https://docs.ropensci.org/taxa/reference/interleave.html","id":null,"dir":"Reference","previous_headings":"","what":"Interleaves two vectors — interleave","title":"Interleaves two vectors — interleave","text":"Taken \"http://r.789695.n4.nabble.com/Interleaving-elements--two-vectors-td795123.html\"","code":""},{"path":"https://docs.ropensci.org/taxa/reference/interleave.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Interleaves two vectors — interleave","text":"","code":"interleave(v1, v2)"},{"path":"https://docs.ropensci.org/taxa/reference/internodes.html","id":null,"dir":"Reference","previous_headings":"","what":"Get internodes — internodes","title":"Get internodes — internodes","text":"Get internodes indexes taxon another per-taxon value. internode taxon exactly one supertaxon one subtaxon. taxa can removed without losing information relationships remaining taxa.","code":""},{"path":"https://docs.ropensci.org/taxa/reference/internodes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get internodes — internodes","text":"","code":"internodes(x)"},{"path":"https://docs.ropensci.org/taxa/reference/internodes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get internodes — internodes","text":"x object get internodes , taxonomy object.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/taxa/reference/internodes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get internodes — internodes","text":"","code":"x <- taxonomy(c('Carnivora', 'Felidae', 'Panthera', 'Panthera leo',                 'Panthera tigris', 'Ursidae', 'Ursus', 'Ursus arctos'),               supertaxa = c(NA, 1, 2, 3, 3, 1, 6, 7)) internodes(x) #> [1] 2 6 7"},{"path":"https://docs.ropensci.org/taxa/reference/is_classification.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if is a classification — is_classification","title":"Check if is a classification — is_classification","text":"Check object classification class","code":""},{"path":"https://docs.ropensci.org/taxa/reference/is_classification.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if is a classification — is_classification","text":"","code":"is_classification(x)"},{"path":"https://docs.ropensci.org/taxa/reference/is_classification.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if is a classification — is_classification","text":"x object test","code":""},{"path":"https://docs.ropensci.org/taxa/reference/is_internode.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if taxa are internodes — is_internode","title":"Check if taxa are internodes — is_internode","text":"Check taxon internode. internode taxon exactly one supertaxon one subtaxon. taxa can removed without losing information relationships remaining taxa.","code":""},{"path":"https://docs.ropensci.org/taxa/reference/is_internode.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if taxa are internodes — is_internode","text":"","code":"is_internode(x)"},{"path":"https://docs.ropensci.org/taxa/reference/is_internode.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if taxa are internodes — is_internode","text":"x object get internodes , taxonomy object.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/taxa/reference/is_internode.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if taxa are internodes — is_internode","text":"","code":"x <- taxonomy(c('Carnivora', 'Felidae', 'Panthera', 'Panthera leo',                 'Panthera tigris', 'Ursidae', 'Ursus', 'Ursus arctos'),               supertaxa = c(NA, 1, 2, 3, 3, 1, 6, 7)) is_internode(x) #> [1] FALSE  TRUE FALSE FALSE FALSE  TRUE  TRUE FALSE"},{"path":"https://docs.ropensci.org/taxa/reference/is_leaf.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if taxa are leaves — is_leaf","title":"Check if taxa are leaves — is_leaf","text":"Check taxon leaf. leaf taxon subtaxa. subtaxa.","code":""},{"path":"https://docs.ropensci.org/taxa/reference/is_leaf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if taxa are leaves — is_leaf","text":"","code":"is_leaf(x)"},{"path":"https://docs.ropensci.org/taxa/reference/is_leaf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if taxa are leaves — is_leaf","text":"x object get leaves , taxonomy object","code":""},{"path":[]},{"path":"https://docs.ropensci.org/taxa/reference/is_leaf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if taxa are leaves — is_leaf","text":"","code":"x <- taxonomy(c('Carnivora', 'Felidae', 'Panthera', 'Panthera leo',                 'Panthera tigris', 'Ursidae', 'Ursus', 'Ursus arctos'),               supertaxa = c(NA, 1, 2, 3, 3, 1, 6, 7)) is_leaf(x) #> [1] FALSE FALSE FALSE  TRUE  TRUE FALSE FALSE  TRUE"},{"path":"https://docs.ropensci.org/taxa/reference/is_root.html","id":null,"dir":"Reference","previous_headings":"","what":"Test if taxa are roots — is_root","title":"Test if taxa are roots — is_root","text":"Check taxon root. root taxon supertaxon.","code":""},{"path":"https://docs.ropensci.org/taxa/reference/is_root.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test if taxa are roots — is_root","text":"","code":"is_root(x, subset = NULL)"},{"path":"https://docs.ropensci.org/taxa/reference/is_root.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test if taxa are roots — is_root","text":"x object containing taxonomic relationships, taxonomy objects. subset subset tree search roots subset. Can indexes names.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/taxa/reference/is_root.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test if taxa are roots — is_root","text":"","code":"x <- taxonomy(c('Carnivora', 'Felidae', 'Panthera', 'Panthera leo',                 'Panthera tigris', 'Ursidae', 'Ursus', 'Ursus arctos'),               supertaxa = c(NA, 1, 2, 3, 3, 1, 6, 7)) is_root(x) #> [1]  TRUE FALSE FALSE FALSE FALSE FALSE FALSE FALSE is_root(x, subset = 2:8) #> [1] FALSE  TRUE FALSE FALSE FALSE  TRUE FALSE FALSE"},{"path":"https://docs.ropensci.org/taxa/reference/is_stem.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if taxa are stems — is_stem","title":"Check if taxa are stems — is_stem","text":"Check taxon stem. stem taxa root first taxon multiple subtaxa.","code":""},{"path":"https://docs.ropensci.org/taxa/reference/is_stem.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if taxa are stems — is_stem","text":"","code":"is_stem(x)"},{"path":"https://docs.ropensci.org/taxa/reference/is_stem.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if taxa are stems — is_stem","text":"x object taxonomic relationships, like taxonomy objects.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/taxa/reference/is_stem.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if taxa are stems — is_stem","text":"","code":"x <- taxonomy(c('Carnivora', 'Felidae', 'Panthera', 'Panthera leo',                 'Panthera tigris'),               supertaxa = c(NA, 1, 2, 3, 3)) is_stem(x) #> [1]  TRUE  TRUE FALSE FALSE FALSE"},{"path":"https://docs.ropensci.org/taxa/reference/is_taxon.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if something is a taxon object — is_taxon","title":"Check if something is a taxon object — is_taxon","text":"Check object taxon class","code":""},{"path":"https://docs.ropensci.org/taxa/reference/is_taxon.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if something is a taxon object — is_taxon","text":"","code":"is_taxon(x)"},{"path":"https://docs.ropensci.org/taxa/reference/is_taxon.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if something is a taxon object — is_taxon","text":"x object test","code":""},{"path":"https://docs.ropensci.org/taxa/reference/is_taxon.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if something is a taxon object — is_taxon","text":"","code":"x <- taxon(c('A', 'B', 'C')) is_taxon(x) #> [1] TRUE is_taxon(1:2) #> [1] FALSE"},{"path":"https://docs.ropensci.org/taxa/reference/is_taxon_authority.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if is a taxon_authority — is_taxon_authority","title":"Check if is a taxon_authority — is_taxon_authority","text":"Check object taxon_authority class","code":""},{"path":"https://docs.ropensci.org/taxa/reference/is_taxon_authority.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if is a taxon_authority — is_taxon_authority","text":"","code":"is_taxon_authority(x)"},{"path":"https://docs.ropensci.org/taxa/reference/is_taxon_authority.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if is a taxon_authority — is_taxon_authority","text":"x object test","code":""},{"path":"https://docs.ropensci.org/taxa/reference/is_taxon_authority.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if is a taxon_authority — is_taxon_authority","text":"","code":"x <- taxon_authority(c('Cham. & Schldl.', 'L.'),                      date = c('1827', '1753')) is_taxon_authority(x) #> [1] TRUE is_taxon_authority(1:3) #> [1] FALSE"},{"path":"https://docs.ropensci.org/taxa/reference/is_taxon_db.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if something is a taxon_db — is_taxon_db","title":"Check if something is a taxon_db — is_taxon_db","text":"Check object taxon_db class","code":""},{"path":"https://docs.ropensci.org/taxa/reference/is_taxon_db.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if something is a taxon_db — is_taxon_db","text":"","code":"is_taxon_db(x)"},{"path":"https://docs.ropensci.org/taxa/reference/is_taxon_db.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if something is a taxon_db — is_taxon_db","text":"x object test","code":""},{"path":"https://docs.ropensci.org/taxa/reference/is_taxon_db.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if something is a taxon_db — is_taxon_db","text":"","code":"x <- taxon_db(c('ncbi', 'ncbi', 'itis')) is_taxon_db(x) #> [1] TRUE is_taxon_db(1:3) #> [1] FALSE"},{"path":"https://docs.ropensci.org/taxa/reference/is_taxon_id.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if something is a taxon_id object — is_taxon_id","title":"Check if something is a taxon_id object — is_taxon_id","text":"Check object taxon_id class","code":""},{"path":"https://docs.ropensci.org/taxa/reference/is_taxon_id.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if something is a taxon_id object — is_taxon_id","text":"","code":"is_taxon_id(x)"},{"path":"https://docs.ropensci.org/taxa/reference/is_taxon_id.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if something is a taxon_id object — is_taxon_id","text":"x object test","code":""},{"path":"https://docs.ropensci.org/taxa/reference/is_taxon_id.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if something is a taxon_id object — is_taxon_id","text":"","code":"x <- taxon_id(c('9606', '1386', '4890', '4345'), db = 'ncbi') is_taxon_id(x) #> [1] TRUE is_taxon_id(1:3) #> [1] FALSE"},{"path":"https://docs.ropensci.org/taxa/reference/is_taxon_rank.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if something is a taxon_rank — is_taxon_rank","title":"Check if something is a taxon_rank — is_taxon_rank","text":"Check object taxon_rank class","code":""},{"path":"https://docs.ropensci.org/taxa/reference/is_taxon_rank.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if something is a taxon_rank — is_taxon_rank","text":"","code":"is_taxon_rank(x)"},{"path":"https://docs.ropensci.org/taxa/reference/is_taxon_rank.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if something is a taxon_rank — is_taxon_rank","text":"x object test","code":""},{"path":"https://docs.ropensci.org/taxa/reference/is_taxon_rank.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if something is a taxon_rank — is_taxon_rank","text":"","code":"x <- taxon_rank(c('species', 'species', 'phylum', 'family')) is_taxon_rank(x) #> [1] TRUE is_taxon_rank(1:3) #> [1] FALSE"},{"path":"https://docs.ropensci.org/taxa/reference/is_taxon_rank_level.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if is a taxon id — is_taxon_rank_level","title":"Check if is a taxon id — is_taxon_rank_level","text":"Check object taxon id class","code":""},{"path":"https://docs.ropensci.org/taxa/reference/is_taxon_rank_level.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if is a taxon id — is_taxon_rank_level","text":"","code":"is_taxon_rank_level(x)"},{"path":"https://docs.ropensci.org/taxa/reference/is_taxon_rank_level.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if is a taxon id — is_taxon_rank_level","text":"x object test","code":""},{"path":"https://docs.ropensci.org/taxa/reference/is_taxonomy.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if something is a taxonomy — is_taxonomy","title":"Check if something is a taxonomy — is_taxonomy","text":"Check object taxonomy class","code":""},{"path":"https://docs.ropensci.org/taxa/reference/is_taxonomy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if something is a taxonomy — is_taxonomy","text":"","code":"is_taxonomy(x)"},{"path":"https://docs.ropensci.org/taxa/reference/is_taxonomy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if something is a taxonomy — is_taxonomy","text":"x object test","code":""},{"path":"https://docs.ropensci.org/taxa/reference/is_taxonomy.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if something is a taxonomy — is_taxonomy","text":"","code":"x <- taxonomy(c('Carnivora', 'Felidae', 'Panthera', 'Panthera leo',                 'Panthera tigris', 'Ursidae', 'Ursus', 'Ursus arctos'),               supertaxa = c(NA, 1, 2, 3, 3, 1, 6, 7)) is_taxonomy(x) #> [1] TRUE is_taxonomy(1:2) #> [1] FALSE"},{"path":"https://docs.ropensci.org/taxa/reference/is_valid_regex.html","id":null,"dir":"Reference","previous_headings":"","what":"Check regex validity — is_valid_regex","title":"Check regex validity — is_valid_regex","text":"Check regular expression valid","code":""},{"path":"https://docs.ropensci.org/taxa/reference/is_valid_regex.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check regex validity — is_valid_regex","text":"","code":"is_valid_regex(text)"},{"path":"https://docs.ropensci.org/taxa/reference/is_valid_regex.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check regex validity — is_valid_regex","text":"text putative regex check.","code":""},{"path":"https://docs.ropensci.org/taxa/reference/leaves.html","id":null,"dir":"Reference","previous_headings":"","what":"Get leaves — leaves","title":"Get leaves — leaves","text":"Get leaves indexes taxon another per-taxon value. Leaves taxa subtaxa.","code":""},{"path":"https://docs.ropensci.org/taxa/reference/leaves.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get leaves — leaves","text":"","code":"leaves(x, value = NULL, ...)"},{"path":"https://docs.ropensci.org/taxa/reference/leaves.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get leaves — leaves","text":"x object get leaves , taxonomy object value Something return instead indexes. Must length number taxa. ... Additional arguments.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/taxa/reference/leaves.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get leaves — leaves","text":"","code":"x <- taxonomy(c('Carnivora', 'Felidae', 'Panthera', 'Panthera leo',                 'Panthera tigris', 'Ursidae', 'Ursus', 'Ursus arctos'),               supertaxa = c(NA, 1, 2, 3, 3, 1, 6, 7)) leaves(x) #> [[1]] #> [1] 4 5 8 #>  #> [[2]] #> [1] 4 5 #>  #> [[3]] #> [1] 4 5 #>  #> [[4]] #> integer(0) #>  #> [[5]] #> integer(0) #>  #> [[6]] #> [1] 8 #>  #> [[7]] #> [1] 8 #>  #> [[8]] #> integer(0) #>  leaves(x, value = tax_name(x)) #> [[1]] #> [1] \"Panthera leo\"    \"Panthera tigris\" \"Ursus arctos\"    #>  #> [[2]] #> [1] \"Panthera leo\"    \"Panthera tigris\" #>  #> [[3]] #> [1] \"Panthera leo\"    \"Panthera tigris\" #>  #> [[4]] #> character(0) #>  #> [[5]] #> character(0) #>  #> [[6]] #> [1] \"Ursus arctos\" #>  #> [[7]] #> [1] \"Ursus arctos\" #>  #> [[8]] #> character(0) #>"},{"path":"https://docs.ropensci.org/taxa/reference/limited_print.html","id":null,"dir":"Reference","previous_headings":"","what":"Print a subset of a character vector — limited_print","title":"Print a subset of a character vector — limited_print","text":"Prints start end values character vector. number values printed depend width screen default.","code":""},{"path":"https://docs.ropensci.org/taxa/reference/limited_print.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print a subset of a character vector — limited_print","text":"","code":"limited_print(   chars,   prefix = \"\",   sep = \", \",   mid = \" ... \",   trunc_char = \"[truncated]\",   max_chars = getOption(\"width\") - nchar(prefix) - 5,   type = \"message\" )"},{"path":"https://docs.ropensci.org/taxa/reference/limited_print.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print a subset of a character vector — limited_print","text":"chars (character) print. prefix (character length 1) print chars, line. sep put consecutive values mid used indicate omitted values trunc_char appended onto truncated values max_chars (numeric length 1) maximum number characters print. type (\"error\", \"warning\", \"message\", \"cat\", \"print\", \"silent\", \"plain\")","code":""},{"path":"https://docs.ropensci.org/taxa/reference/limited_print.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print a subset of a character vector — limited_print","text":"NULL","code":""},{"path":"https://docs.ropensci.org/taxa/reference/limited_print.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print a subset of a character vector — limited_print","text":"","code":"taxa:::limited_print(1:100) #>  1, 2, 3, 4, 5, 6, 7, 8, 9 ... 92, 93, 94, 95, 96, 97, 98, 99, 100 taxa:::limited_print(1:10000) #>  1, 2, 3, 4, 5, 6, 7 ... 9994, 9995, 9996, 9997, 9998, 9999, 10000 taxa:::limited_print(1:10000, prefix = \"stuff:\") #> stuff: 1, 2, 3, 4, 5, 6, 7 ... 9995, 9996, 9997, 9998, 9999, 10000"},{"path":"https://docs.ropensci.org/taxa/reference/matches.html","id":null,"dir":"Reference","previous_headings":"","what":"dplyr select_helpers — matches","title":"dplyr select_helpers — matches","text":"dplyr select_helpers","code":""},{"path":"https://docs.ropensci.org/taxa/reference/n_leaves.html","id":null,"dir":"Reference","previous_headings":"","what":"Number of leaves per taxon — n_leaves","title":"Number of leaves per taxon — n_leaves","text":"Get number leaves per taxon. leaf taxon subtaxa.","code":""},{"path":"https://docs.ropensci.org/taxa/reference/n_leaves.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Number of leaves per taxon — n_leaves","text":"","code":"n_leaves(x)"},{"path":"https://docs.ropensci.org/taxa/reference/n_leaves.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Number of leaves per taxon — n_leaves","text":"x object get leaves , taxonomy object","code":""},{"path":[]},{"path":"https://docs.ropensci.org/taxa/reference/n_leaves.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Number of leaves per taxon — n_leaves","text":"","code":"x <- taxonomy(c('Carnivora', 'Felidae', 'Panthera', 'Panthera leo',                 'Panthera tigris', 'Ursidae', 'Ursus', 'Ursus arctos'),               supertaxa = c(NA, 1, 2, 3, 3, 1, 6, 7)) n_leaves(x) #> [1] 3 2 2 0 0 1 1 0"},{"path":"https://docs.ropensci.org/taxa/reference/n_subtaxa.html","id":null,"dir":"Reference","previous_headings":"","what":"Number of subtaxa per taxon — n_subtaxa","title":"Number of subtaxa per taxon — n_subtaxa","text":"Get number subtaxa per taxon.","code":""},{"path":"https://docs.ropensci.org/taxa/reference/n_subtaxa.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Number of subtaxa per taxon — n_subtaxa","text":"","code":"n_subtaxa(x, subset = NULL, max_depth = NULL, include = FALSE)"},{"path":"https://docs.ropensci.org/taxa/reference/n_subtaxa.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Number of subtaxa per taxon — n_subtaxa","text":"x object get subtaxa , taxonomy object. subset subset tree search. Can indexes names. max_depth number ranks traverse. example, max_depth = 1 returns immediate subtaxa. default (NULL) information subtaxa returned (.e. subtaxa subtaxa, etc). include TRUE, include information taxon output.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/taxa/reference/n_subtaxa.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Number of subtaxa per taxon — n_subtaxa","text":"","code":"# Generate example data x <- taxonomy(c('Carnivora', 'Felidae', 'Panthera', 'Panthera leo',                 'Panthera tigris', 'Ursidae', 'Ursus', 'Ursus arctos'),               supertaxa = c(NA, 1, 2, 3, 3, 1, 6, 7))  # Find number of subtaxa (including subtaxa of subtaxa, etc) n_subtaxa(x) #> [1] 7 3 2 0 0 2 1 0  # Find the number of subtaxa one rank below each taxon n_subtaxa(x, max_depth = 1) #> [1] 2 1 2 0 0 1 1 0  # Only return data for some taxa (faster than subsetting the whole result) n_subtaxa(x, subset = 1:3) #> [1] 7 3 2"},{"path":"https://docs.ropensci.org/taxa/reference/n_supertaxa.html","id":null,"dir":"Reference","previous_headings":"","what":"Number of supertaxa per taxon — n_supertaxa","title":"Number of supertaxa per taxon — n_supertaxa","text":"Get number supertaxa taxon contained .","code":""},{"path":"https://docs.ropensci.org/taxa/reference/n_supertaxa.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Number of supertaxa per taxon — n_supertaxa","text":"","code":"n_supertaxa(x, subset = NULL, max_depth = NULL, include = FALSE)"},{"path":"https://docs.ropensci.org/taxa/reference/n_supertaxa.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Number of supertaxa per taxon — n_supertaxa","text":"x object get supertaxa , taxonomy object. subset subset tree search roots subset. Can indexes names. max_depth number levels traverse. example, max_depth = 1 returns immediate supertaxa. default (NULL) information supertaxa returned. include TRUE, include information taxon output.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/taxa/reference/n_supertaxa.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Number of supertaxa per taxon — n_supertaxa","text":"","code":"# Generate example data x <- taxonomy(c('Carnivora', 'Felidae', 'Panthera', 'Panthera leo',                 'Panthera tigris', 'Ursidae', 'Ursus', 'Ursus arctos'),               supertaxa = c(NA, 1, 2, 3, 3, 1, 6, 7))  # Find number of supertaxa each taxon is contained in n_supertaxa(x) #> [1] 0 1 2 3 3 1 2 3  # Only return data for some taxa (faster than subsetting the whole result) n_supertaxa(x, subset = 1:3) #> [1] 0 1 2"},{"path":"https://docs.ropensci.org/taxa/reference/new_classification.html","id":null,"dir":"Reference","previous_headings":"","what":"Minimal classfication constructor — new_classification","title":"Minimal classfication constructor — new_classification","text":"Minimal classfication constructor internal use. use input known valid since validity checks done.","code":""},{"path":"https://docs.ropensci.org/taxa/reference/new_classification.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Minimal classfication constructor — new_classification","text":"","code":"new_classification(taxonomy = taxonomy(), instances = integer())"},{"path":"https://docs.ropensci.org/taxa/reference/new_classification.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Minimal classfication constructor — new_classification","text":"taxonomy taxonomy() object. instances indexes instance taxon taxonomy. Can length.","code":""},{"path":"https://docs.ropensci.org/taxa/reference/new_classification.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Minimal classfication constructor — new_classification","text":"S3 object class taxa_classification","code":""},{"path":"https://docs.ropensci.org/taxa/reference/new_taxon.html","id":null,"dir":"Reference","previous_headings":"","what":"Minimal taxon constructor — new_taxon","title":"Minimal taxon constructor — new_taxon","text":"Minimal taxon constructor internal use. use input known valid since validity checks done.","code":""},{"path":"https://docs.ropensci.org/taxa/reference/new_taxon.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Minimal taxon constructor — new_taxon","text":"","code":"new_taxon(   .names = NULL,   name = character(),   rank = taxon_rank(),   id = taxon_id(),   auth = taxon_authority(),   ... )"},{"path":"https://docs.ropensci.org/taxa/reference/new_taxon.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Minimal taxon constructor — new_taxon","text":".names names vector. name names taxa character vector. rank ranks taxa taxon_rank vector. id ids taxa taxon_id vector. auth authority taxon taxon_authority vector.","code":""},{"path":"https://docs.ropensci.org/taxa/reference/new_taxon.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Minimal taxon constructor — new_taxon","text":"S3 object class taxa_taxon","code":""},{"path":"https://docs.ropensci.org/taxa/reference/new_taxon_authority.html","id":null,"dir":"Reference","previous_headings":"","what":"Minimal taxon_authority constructor — new_taxon_authority","title":"Minimal taxon_authority constructor — new_taxon_authority","text":"Minimal taxon_authority constructor internal use. use input known valid since validity checks done.","code":""},{"path":"https://docs.ropensci.org/taxa/reference/new_taxon_authority.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Minimal taxon_authority constructor — new_taxon_authority","text":"","code":"new_taxon_authority(   .names = NULL,   author = character(),   date = character(),   citation = character() )"},{"path":"https://docs.ropensci.org/taxa/reference/new_taxon_authority.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Minimal taxon_authority constructor — new_taxon_authority","text":".names names vector. author Zero author names. date Zero dates. citation Zero literature citations.","code":""},{"path":"https://docs.ropensci.org/taxa/reference/new_taxon_authority.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Minimal taxon_authority constructor — new_taxon_authority","text":"S3 object class taxa_taxon_authority","code":""},{"path":"https://docs.ropensci.org/taxa/reference/new_taxon_db.html","id":null,"dir":"Reference","previous_headings":"","what":"Minimal taxon_db constructor — new_taxon_db","title":"Minimal taxon_db constructor — new_taxon_db","text":"Minimal taxon_db constructor internal use. use input known valid since validity checks done.","code":""},{"path":"https://docs.ropensci.org/taxa/reference/new_taxon_db.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Minimal taxon_db constructor — new_taxon_db","text":"","code":"new_taxon_db(db = character(), ...)"},{"path":"https://docs.ropensci.org/taxa/reference/new_taxon_db.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Minimal taxon_db constructor — new_taxon_db","text":"db Zero taxonomic database names. name contained names(db_ref). Inputs transformed character vector. ... Additional arguments.","code":""},{"path":"https://docs.ropensci.org/taxa/reference/new_taxon_db.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Minimal taxon_db constructor — new_taxon_db","text":"S3 object class taxa_taxon_db","code":""},{"path":"https://docs.ropensci.org/taxa/reference/new_taxon_db_def.html","id":null,"dir":"Reference","previous_headings":"","what":"Minimal taxon_db_def constructor — new_taxon_db_def","title":"Minimal taxon_db_def constructor — new_taxon_db_def","text":"Minimal taxon_db_def constructor internal use. use input known valid since validity checks done.","code":""},{"path":"https://docs.ropensci.org/taxa/reference/new_taxon_db_def.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Minimal taxon_db_def constructor — new_taxon_db_def","text":"","code":"new_taxon_db_def(   name = character(),   url = character(),   desc = character(),   id_regex = character(),   rank_levels = list() )"},{"path":"https://docs.ropensci.org/taxa/reference/new_taxon_db_def.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Minimal taxon_db_def constructor — new_taxon_db_def","text":"name Name database lower case. Inputs transformed character vector. url URL database website. Inputs transformed character vector. desc Description database. Inputs transformed character vector. id_regex regular expression taxon IDs database. Inputs transformed character vector. rank_levels Valid taxonomic ranks database. list numeric vectors named taxonomic ranks.","code":""},{"path":"https://docs.ropensci.org/taxa/reference/new_taxon_db_def.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Minimal taxon_db_def constructor — new_taxon_db_def","text":"S3 object class taxa_taxon_db_def","code":""},{"path":"https://docs.ropensci.org/taxa/reference/new_taxon_id.html","id":null,"dir":"Reference","previous_headings":"","what":"Minimal taxon_id constructor — new_taxon_id","title":"Minimal taxon_id constructor — new_taxon_id","text":"Minimal taxon_id constructor internal use. use input known valid since validity checks done.","code":""},{"path":"https://docs.ropensci.org/taxa/reference/new_taxon_id.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Minimal taxon_id constructor — new_taxon_id","text":"","code":"new_taxon_id(.names = NULL, id = character(), db = taxon_db())"},{"path":"https://docs.ropensci.org/taxa/reference/new_taxon_id.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Minimal taxon_id constructor — new_taxon_id","text":".names names apply vector id Zero taxonomic ids. Inputs transformed character vector. db name(s) database(s) associated IDs. NA (default), input must consist names databases database_ref. length must 0, 1, equal number IDs.","code":""},{"path":"https://docs.ropensci.org/taxa/reference/new_taxon_id.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Minimal taxon_id constructor — new_taxon_id","text":"S3 object class taxa_taxon_id","code":""},{"path":"https://docs.ropensci.org/taxa/reference/new_taxon_rank.html","id":null,"dir":"Reference","previous_headings":"","what":"Minimal taxon_rank constructor — new_taxon_rank","title":"Minimal taxon_rank constructor — new_taxon_rank","text":"Minimal taxon_rank constructor internal use. use input known valid since validity checks done.","code":""},{"path":"https://docs.ropensci.org/taxa/reference/new_taxon_rank.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Minimal taxon_rank constructor — new_taxon_rank","text":"","code":"new_taxon_rank(rank = character(), levels = taxon_rank_level())"},{"path":"https://docs.ropensci.org/taxa/reference/new_taxon_rank.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Minimal taxon_rank constructor — new_taxon_rank","text":"rank Zero taxonomic rank names. Inputs transformed character vector. levels named numeric vector indicating names orders possible taxonomic ranks. Higher numbers indicate fine-scale groupings. Ranks unknown order can indicated NA instead number.","code":""},{"path":"https://docs.ropensci.org/taxa/reference/new_taxon_rank.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Minimal taxon_rank constructor — new_taxon_rank","text":"S3 object class taxa_taxon_rank","code":""},{"path":"https://docs.ropensci.org/taxa/reference/new_taxon_rank_level.html","id":null,"dir":"Reference","previous_headings":"","what":"Minimal taxon_rank_level constructor — new_taxon_rank_level","title":"Minimal taxon_rank_level constructor — new_taxon_rank_level","text":"Minimal taxon_rank_level constructor internal use. use input known valid since validity checks done.","code":""},{"path":"https://docs.ropensci.org/taxa/reference/new_taxon_rank_level.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Minimal taxon_rank_level constructor — new_taxon_rank_level","text":"","code":"new_taxon_rank_level(level = character(), order = numeric())"},{"path":"https://docs.ropensci.org/taxa/reference/new_taxon_rank_level.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Minimal taxon_rank_level constructor — new_taxon_rank_level","text":"level Zero taxonomic rank names. named numeric applied, names used levels numeric values used order. Inputs transformed character vector. order Integers determine relative order taxonomic levels. Inputs transformed integer vector. NAs can used indicate order known.","code":""},{"path":"https://docs.ropensci.org/taxa/reference/new_taxon_rank_level.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Minimal taxon_rank_level constructor — new_taxon_rank_level","text":"S3 object class taxa_taxon_rank_level","code":""},{"path":"https://docs.ropensci.org/taxa/reference/new_taxonomy.html","id":null,"dir":"Reference","previous_headings":"","what":"Minimal taxonomy constructor — new_taxonomy","title":"Minimal taxonomy constructor — new_taxonomy","text":"Minimal taxonomy constructor internal use. use input known valid since validity checks done.","code":""},{"path":"https://docs.ropensci.org/taxa/reference/new_taxonomy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Minimal taxonomy constructor — new_taxonomy","text":"","code":"new_taxonomy(taxa = taxon(), supertaxa = integer())"},{"path":"https://docs.ropensci.org/taxa/reference/new_taxonomy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Minimal taxonomy constructor — new_taxonomy","text":"taxa taxon vector. supertaxa indexes taxa taxon's supertaxon.","code":""},{"path":"https://docs.ropensci.org/taxa/reference/new_taxonomy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Minimal taxonomy constructor — new_taxonomy","text":"S3 object class taxa_taxon","code":""},{"path":"https://docs.ropensci.org/taxa/reference/num_range.html","id":null,"dir":"Reference","previous_headings":"","what":"dplyr select_helpers — num_range","title":"dplyr select_helpers — num_range","text":"dplyr select_helpers","code":""},{"path":"https://docs.ropensci.org/taxa/reference/one_of.html","id":null,"dir":"Reference","previous_headings":"","what":"dplyr select_helpers — one_of","title":"dplyr select_helpers — one_of","text":"dplyr select_helpers","code":""},{"path":"https://docs.ropensci.org/taxa/reference/print_with_color.html","id":null,"dir":"Reference","previous_headings":"","what":"Print that works with color — print_with_color","title":"Print that works with color — print_with_color","text":"print function, can print colored text. bit hack, way found replicate behavior print without rewriting entire print function.","code":""},{"path":"https://docs.ropensci.org/taxa/reference/print_with_color.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print that works with color — print_with_color","text":"","code":"print_with_color(x, original_length = length(x), ...)"},{"path":"https://docs.ropensci.org/taxa/reference/print_with_color.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print that works with color — print_with_color","text":"x print, typically character vector original_length length full vector part given. ... Passed print","code":""},{"path":"https://docs.ropensci.org/taxa/reference/printed_classification.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare classification for printing — printed_classification","title":"Prepare classification for printing — printed_classification","text":"Prepare classification printing. Makes color optional.","code":""},{"path":"https://docs.ropensci.org/taxa/reference/printed_classification.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare classification for printing — printed_classification","text":"","code":"printed_classification(x, color = FALSE)"},{"path":"https://docs.ropensci.org/taxa/reference/printed_classification.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare classification for printing — printed_classification","text":"color Use color?","code":""},{"path":"https://docs.ropensci.org/taxa/reference/printed_classification.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare classification for printing — printed_classification","text":"character","code":""},{"path":"https://docs.ropensci.org/taxa/reference/printed_taxon.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare taxon for printing — printed_taxon","title":"Prepare taxon for printing — printed_taxon","text":"Prepare taxon printing. Makes color optional.","code":""},{"path":"https://docs.ropensci.org/taxa/reference/printed_taxon.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare taxon for printing — printed_taxon","text":"","code":"printed_taxon(x, color = FALSE)"},{"path":"https://docs.ropensci.org/taxa/reference/printed_taxon.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare taxon for printing — printed_taxon","text":"color Use color?","code":""},{"path":"https://docs.ropensci.org/taxa/reference/printed_taxon.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare taxon for printing — printed_taxon","text":"character","code":""},{"path":"https://docs.ropensci.org/taxa/reference/printed_taxon_authority.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare taxon_authority for printing — printed_taxon_authority","title":"Prepare taxon_authority for printing — printed_taxon_authority","text":"Prepare taxon_authority printing. Makes color optional.","code":""},{"path":"https://docs.ropensci.org/taxa/reference/printed_taxon_authority.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare taxon_authority for printing — printed_taxon_authority","text":"","code":"printed_taxon_authority(x, color = FALSE)"},{"path":"https://docs.ropensci.org/taxa/reference/printed_taxon_authority.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare taxon_authority for printing — printed_taxon_authority","text":"color Use color?","code":""},{"path":"https://docs.ropensci.org/taxa/reference/printed_taxon_authority.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare taxon_authority for printing — printed_taxon_authority","text":"character","code":""},{"path":"https://docs.ropensci.org/taxa/reference/printed_taxon_id.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare taxon_id for printing — printed_taxon_id","title":"Prepare taxon_id for printing — printed_taxon_id","text":"Prepare taxon_id printing. Makes color optional.","code":""},{"path":"https://docs.ropensci.org/taxa/reference/printed_taxon_id.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare taxon_id for printing — printed_taxon_id","text":"","code":"printed_taxon_id(x, color = FALSE)"},{"path":"https://docs.ropensci.org/taxa/reference/printed_taxon_id.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare taxon_id for printing — printed_taxon_id","text":"color Use color?","code":""},{"path":"https://docs.ropensci.org/taxa/reference/printed_taxon_id.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare taxon_id for printing — printed_taxon_id","text":"character","code":""},{"path":"https://docs.ropensci.org/taxa/reference/printed_taxon_rank.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare taxon_rank for printing — printed_taxon_rank","title":"Prepare taxon_rank for printing — printed_taxon_rank","text":"Prepare taxon_rank printing. Makes color optional.","code":""},{"path":"https://docs.ropensci.org/taxa/reference/printed_taxon_rank.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare taxon_rank for printing — printed_taxon_rank","text":"","code":"printed_taxon_rank(x, color = FALSE)"},{"path":"https://docs.ropensci.org/taxa/reference/printed_taxon_rank.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare taxon_rank for printing — printed_taxon_rank","text":"color Use color?","code":""},{"path":"https://docs.ropensci.org/taxa/reference/printed_taxon_rank.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare taxon_rank for printing — printed_taxon_rank","text":"character","code":""},{"path":"https://docs.ropensci.org/taxa/reference/printed_taxon_rank_level.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare taxon_rank_level for printing — printed_taxon_rank_level","title":"Prepare taxon_rank_level for printing — printed_taxon_rank_level","text":"Prepare taxon_rank_level printing. Makes color optional.","code":""},{"path":"https://docs.ropensci.org/taxa/reference/printed_taxon_rank_level.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare taxon_rank_level for printing — printed_taxon_rank_level","text":"","code":"printed_taxon_rank_level(x, color = FALSE)"},{"path":"https://docs.ropensci.org/taxa/reference/printed_taxon_rank_level.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare taxon_rank_level for printing — printed_taxon_rank_level","text":"color Use color?","code":""},{"path":"https://docs.ropensci.org/taxa/reference/printed_taxon_rank_level.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare taxon_rank_level for printing — printed_taxon_rank_level","text":"character","code":""},{"path":"https://docs.ropensci.org/taxa/reference/printed_taxonomy.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare taxonomy for printing — printed_taxonomy","title":"Prepare taxonomy for printing — printed_taxonomy","text":"Prepare taxonomy printing. Makes color optional.","code":""},{"path":"https://docs.ropensci.org/taxa/reference/printed_taxonomy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare taxonomy for printing — printed_taxonomy","text":"","code":"printed_taxonomy(x, color = FALSE)"},{"path":"https://docs.ropensci.org/taxa/reference/printed_taxonomy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare taxonomy for printing — printed_taxonomy","text":"color Use color?","code":""},{"path":"https://docs.ropensci.org/taxa/reference/printed_taxonomy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare taxonomy for printing — printed_taxonomy","text":"character","code":""},{"path":"https://docs.ropensci.org/taxa/reference/rank_level_color_funcs.html","id":null,"dir":"Reference","previous_headings":"","what":"Get font color for levels — rank_level_color_funcs","title":"Get font color for levels — rank_level_color_funcs","text":"Make list crayon style functions print taxon rank levels color.","code":""},{"path":"https://docs.ropensci.org/taxa/reference/rank_level_color_funcs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get font color for levels — rank_level_color_funcs","text":"","code":"rank_level_color_funcs(levels)"},{"path":"https://docs.ropensci.org/taxa/reference/rank_ref.html","id":null,"dir":"Reference","previous_headings":"","what":"All known taxonomic ranks — rank_ref","title":"All known taxonomic ranks — rank_ref","text":"list taxonomic ranks databases used combined single vector make easier maintain relative order ranks data multiple databases combined.","code":""},{"path":"https://docs.ropensci.org/taxa/reference/rank_ref.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"All known taxonomic ranks — rank_ref","text":"","code":"rank_ref"},{"path":"https://docs.ropensci.org/taxa/reference/rank_ref.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"All known taxonomic ranks — rank_ref","text":"object class numeric length 52.","code":""},{"path":"https://docs.ropensci.org/taxa/reference/rank_ref.html","id":"attribution","dir":"Reference","previous_headings":"","what":"Attribution","title":"All known taxonomic ranks — rank_ref","text":"list adapted similar one taxize package.","code":""},{"path":"https://docs.ropensci.org/taxa/reference/roots.html","id":null,"dir":"Reference","previous_headings":"","what":"Get root taxa — roots","title":"Get root taxa — roots","text":"Get indexes root taxa taxonomy.","code":""},{"path":"https://docs.ropensci.org/taxa/reference/roots.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get root taxa — roots","text":"","code":"roots(x, subset = NULL)"},{"path":"https://docs.ropensci.org/taxa/reference/roots.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get root taxa — roots","text":"x object containing taxonomic relationships, taxonomy objects. subset subset tree search roots subset. Can indexes names.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/taxa/reference/roots.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get root taxa — roots","text":"","code":"x <- taxonomy(c('Carnivora', 'Felidae', 'Panthera', 'Panthera leo',                 'Panthera tigris', 'Ursidae', 'Ursus', 'Ursus arctos'),               supertaxa = c(NA, 1, 2, 3, 3, 1, 6, 7)) roots(x) #> [1] 1 roots(x, subset = 2:8) #> [1] 2 6"},{"path":"https://docs.ropensci.org/taxa/reference/starts_with.html","id":null,"dir":"Reference","previous_headings":"","what":"dplyr select_helpers — starts_with","title":"dplyr select_helpers — starts_with","text":"dplyr select_helpers","code":""},{"path":"https://docs.ropensci.org/taxa/reference/stems.html","id":null,"dir":"Reference","previous_headings":"","what":"Get stems — stems","title":"Get stems — stems","text":"Get stem indexes taxon another per-taxon value.","code":""},{"path":"https://docs.ropensci.org/taxa/reference/stems.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get stems — stems","text":"","code":"stems(x, value = NULL, ...)"},{"path":"https://docs.ropensci.org/taxa/reference/stems.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get stems — stems","text":"x object taxonomic relationships, like taxonomy objects. value Something return instead indexes. Must length number taxa. ... Additional arguments.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/taxa/reference/stems.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get stems — stems","text":"","code":"x <- taxonomy(c('Carnivora', 'Felidae', 'Panthera', 'Panthera leo',                 'Panthera tigris'),               supertaxa = c(NA, 1, 2, 3, 3)) x <- c(x, x) stems(x) #> [[1]] #> [1] 1 2 #>  #> [[2]] #> [1] 6 7 #>  stems(x, value = tax_name(x)) #> [[1]] #> [1] \"Carnivora\" \"Felidae\"   #>  #> [[2]] #> [1] \"Carnivora\" \"Felidae\"   #>"},{"path":"https://docs.ropensci.org/taxa/reference/subtaxa.html","id":null,"dir":"Reference","previous_headings":"","what":"Get subtaxa — subtaxa","title":"Get subtaxa — subtaxa","text":"Get subtaxa indexes taxon another per-taxon value. Subtaxa taxa contained within taxon.","code":""},{"path":"https://docs.ropensci.org/taxa/reference/subtaxa.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get subtaxa — subtaxa","text":"","code":"subtaxa(x, subset = NULL, max_depth = NULL, include = FALSE, value = NULL, ...)"},{"path":"https://docs.ropensci.org/taxa/reference/subtaxa.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get subtaxa — subtaxa","text":"x object get subtaxa , taxonomy object. subset subset tree search. Can indexes names. max_depth number ranks traverse. example, max_depth = 1 returns immediate subtaxa. default (NULL) information subtaxa returned (.e. subtaxa subtaxa, etc). include TRUE, include information taxon output. value Something return instead indexes. Must length number taxa. ... Additional arguments.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/taxa/reference/subtaxa.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get subtaxa — subtaxa","text":"","code":"# Generate example data x <- taxonomy(c('Carnivora', 'Felidae', 'Panthera', 'Panthera leo',                 'Panthera tigris', 'Ursidae', 'Ursus', 'Ursus arctos'),               supertaxa = c(NA, 1, 2, 3, 3, 1, 6, 7))  # The indexes of all subtaxa (with subtaxa of subtaxa, etc) for each taxon subtaxa(x) #> [[1]] #> [1] 2 3 4 5 6 7 8 #>  #> [[2]] #> [1] 3 4 5 #>  #> [[3]] #> [1] 4 5 #>  #> [[4]] #> integer(0) #>  #> [[5]] #> integer(0) #>  #> [[6]] #> [1] 7 8 #>  #> [[7]] #> [1] 8 #>  #> [[8]] #> integer(0) #>   # The indexes of immediate subtaxa (without subtaxa of subtaxa, etc) for each taxon subtaxa(x, max_depth = 1) #> [[1]] #> [1] 2 6 #>  #> [[2]] #> [1] 3 #>  #> [[3]] #> [1] 4 5 #>  #> [[4]] #> integer(0) #>  #> [[5]] #> integer(0) #>  #> [[6]] #> [1] 7 #>  #> [[7]] #> [1] 8 #>  #> [[8]] #> integer(0) #>   # Return something other than index subtaxa(x, value = tax_name(x)) #> [[1]] #> [1] \"Felidae\"         \"Panthera\"        \"Panthera leo\"    \"Panthera tigris\" #> [5] \"Ursidae\"         \"Ursus\"           \"Ursus arctos\"    #>  #> [[2]] #> [1] \"Panthera\"        \"Panthera leo\"    \"Panthera tigris\" #>  #> [[3]] #> [1] \"Panthera leo\"    \"Panthera tigris\" #>  #> [[4]] #> character(0) #>  #> [[5]] #> character(0) #>  #> [[6]] #> [1] \"Ursus\"        \"Ursus arctos\" #>  #> [[7]] #> [1] \"Ursus arctos\" #>  #> [[8]] #> character(0) #>   # Include each taxon with its subtaxa subtaxa(x, value = tax_name(x), include = TRUE) #> [[1]] #> [1] \"Carnivora\"       \"Felidae\"         \"Panthera\"        \"Panthera leo\"    #> [5] \"Panthera tigris\" \"Ursidae\"         \"Ursus\"           \"Ursus arctos\"    #>  #> [[2]] #> [1] \"Felidae\"         \"Panthera\"        \"Panthera leo\"    \"Panthera tigris\" #>  #> [[3]] #> [1] \"Panthera\"        \"Panthera leo\"    \"Panthera tigris\" #>  #> [[4]] #> [1] \"Panthera leo\" #>  #> [[5]] #> [1] \"Panthera tigris\" #>  #> [[6]] #> [1] \"Ursidae\"      \"Ursus\"        \"Ursus arctos\" #>  #> [[7]] #> [1] \"Ursus\"        \"Ursus arctos\" #>  #> [[8]] #> [1] \"Ursus arctos\" #>   # Only return data for some taxa (faster than subsetting the whole result) subtaxa(x, subset = 3) #> [[1]] #> [1] 4 5 #>"},{"path":"https://docs.ropensci.org/taxa/reference/supertaxa.html","id":null,"dir":"Reference","previous_headings":"","what":"Get supertaxa — supertaxa","title":"Get supertaxa — supertaxa","text":"Get supertaxa indexes taxon another per-taxon value. Supertaxa taxa taxon contained .","code":""},{"path":"https://docs.ropensci.org/taxa/reference/supertaxa.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get supertaxa — supertaxa","text":"","code":"supertaxa(   x,   subset = NULL,   max_depth = NULL,   include = FALSE,   value = NULL,   use_na = FALSE,   ... )"},{"path":"https://docs.ropensci.org/taxa/reference/supertaxa.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get supertaxa — supertaxa","text":"x object get supertaxa , taxonomy object. subset subset tree search roots subset. Can indexes names. max_depth number levels traverse. example, max_depth = 1 returns immediate supertaxa. default (NULL) information supertaxa returned. include TRUE, include information taxon output. value Something return instead indexes. Must length number taxa. use_na Add NA represent root taxonomy (.e. supertaxon) ... Additional arguments.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/taxa/reference/supertaxa.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get supertaxa — supertaxa","text":"","code":"# Generate example data x <- taxonomy(c('Carnivora', 'Felidae', 'Panthera', 'Panthera leo',                 'Panthera tigris', 'Ursidae', 'Ursus', 'Ursus arctos'),               supertaxa = c(NA, 1, 2, 3, 3, 1, 6, 7))  # The indexes of all supertaxa (with supertaxa of supertaxa, etc) for each taxon supertaxa(x) #> [[1]] #> integer(0) #>  #> [[2]] #> [1] 1 #>  #> [[3]] #> [1] 2 1 #>  #> [[4]] #> [1] 3 2 1 #>  #> [[5]] #> [1] 3 2 1 #>  #> [[6]] #> [1] 1 #>  #> [[7]] #> [1] 6 1 #>  #> [[8]] #> [1] 7 6 1 #>   # Return something other than index supertaxa(x, value = tax_name(x)) #> [[1]] #> character(0) #>  #> [[2]] #> [1] \"Carnivora\" #>  #> [[3]] #> [1] \"Felidae\"   \"Carnivora\" #>  #> [[4]] #> [1] \"Panthera\"  \"Felidae\"   \"Carnivora\" #>  #> [[5]] #> [1] \"Panthera\"  \"Felidae\"   \"Carnivora\" #>  #> [[6]] #> [1] \"Carnivora\" #>  #> [[7]] #> [1] \"Ursidae\"   \"Carnivora\" #>  #> [[8]] #> [1] \"Ursus\"     \"Ursidae\"   \"Carnivora\" #>   # Include each taxon with its supertaxa supertaxa(x, value = tax_name(x), include = TRUE) #> [[1]] #> [1] \"Carnivora\" #>  #> [[2]] #> [1] \"Felidae\"   \"Carnivora\" #>  #> [[3]] #> [1] \"Panthera\"  \"Felidae\"   \"Carnivora\" #>  #> [[4]] #> [1] \"Panthera leo\" \"Panthera\"     \"Felidae\"      \"Carnivora\"    #>  #> [[5]] #> [1] \"Panthera tigris\" \"Panthera\"        \"Felidae\"         \"Carnivora\"       #>  #> [[6]] #> [1] \"Ursidae\"   \"Carnivora\" #>  #> [[7]] #> [1] \"Ursus\"     \"Ursidae\"   \"Carnivora\" #>  #> [[8]] #> [1] \"Ursus arctos\" \"Ursus\"        \"Ursidae\"      \"Carnivora\"    #>   # Only return data for some taxa (faster than subsetting the whole result) supertaxa(x, subset = 3) #> [[1]] #> [1] 2 1 #>"},{"path":"https://docs.ropensci.org/taxa/reference/tax_auth.html","id":null,"dir":"Reference","previous_headings":"","what":"Set and get taxon authorities — tax_auth.taxa_classification","title":"Set and get taxon authorities — tax_auth.taxa_classification","text":"Set get taxon authorities objects , taxon objects. Note sets authority information, author name, date, citations. set get just one part authorities, use tax_author, tax_date, tax_cite instead.","code":""},{"path":"https://docs.ropensci.org/taxa/reference/tax_auth.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set and get taxon authorities — tax_auth.taxa_classification","text":"","code":"# S3 method for taxa_classification tax_auth(x)  # S3 method for taxa_classification tax_auth(x) <- value  tax_auth(x)  tax_auth(x) <- value  # S3 method for taxa_taxon tax_auth(x)  # S3 method for taxa_taxon tax_auth(x) <- value  # S3 method for taxa_taxonomy tax_auth(x)  # S3 method for taxa_taxonomy tax_auth(x) <- value"},{"path":"https://docs.ropensci.org/taxa/reference/tax_auth.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set and get taxon authorities — tax_auth.taxa_classification","text":"x object taxon authorities. value taxon IDs set. Inputs coerced taxon_id vector.","code":""},{"path":"https://docs.ropensci.org/taxa/reference/tax_auth.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set and get taxon authorities — tax_auth.taxa_classification","text":"","code":"x <- taxon(name = c('Homo sapiens', 'Bacillus', 'Ascomycota', 'Ericaceae'),            rank = c('species', 'genus', 'phylum', 'family'),            id = taxon_id(c('9606', '1386', '4890', '4345'), db = 'ncbi'),            auth = c('Linnaeus, 1758', 'Cohn 1872', NA, 'Juss., 1789'))  tax_auth(x) #> <taxon_authority[4]> #> [1] Linnaeus 1758 Cohn 1872     NA            Juss. 1789    tax_auth(x) <- tolower(tax_auth(x)) tax_auth(x)[1] <- 'Billy'"},{"path":"https://docs.ropensci.org/taxa/reference/tax_author.html","id":null,"dir":"Reference","previous_headings":"","what":"Set and get taxon authors — tax_author.taxa_classification","title":"Set and get taxon authors — tax_author.taxa_classification","text":"Set get taxon authors objects , taxon_authority objects.","code":""},{"path":"https://docs.ropensci.org/taxa/reference/tax_author.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set and get taxon authors — tax_author.taxa_classification","text":"","code":"# S3 method for taxa_classification tax_author(x)  # S3 method for taxa_classification tax_author(x) <- value  tax_author(x)  tax_author(x) <- value  # S3 method for taxa_taxon tax_author(x)  # S3 method for taxa_taxon tax_author(x) <- value  # S3 method for taxa_taxon_authority tax_author(x) <- value  # S3 method for taxa_taxon_authority tax_author(x)  # S3 method for taxa_taxonomy tax_author(x)  # S3 method for taxa_taxonomy tax_author(x) <- value"},{"path":"https://docs.ropensci.org/taxa/reference/tax_author.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set and get taxon authors — tax_author.taxa_classification","text":"x object taxon authors. value taxon authors set. Inputs coerced character vector.","code":""},{"path":"https://docs.ropensci.org/taxa/reference/tax_author.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set and get taxon authors — tax_author.taxa_classification","text":"","code":"x <- taxon_authority(c('Cham. & Schldl.', 'L.'),                      date = c('1827', '1753')) tax_author(x) #> [1] \"Cham. & Schldl.\" \"L.\"              tax_author(x)[1] <- \"Billy\" tax_author(x) <- tolower(tax_author(x))"},{"path":"https://docs.ropensci.org/taxa/reference/tax_cite.html","id":null,"dir":"Reference","previous_headings":"","what":"Set and get taxon authority citations — tax_cite.taxa_classification","title":"Set and get taxon authority citations — tax_cite.taxa_classification","text":"Set get taxon authority citations objects , taxon_authority objects.","code":""},{"path":"https://docs.ropensci.org/taxa/reference/tax_cite.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set and get taxon authority citations — tax_cite.taxa_classification","text":"","code":"# S3 method for taxa_classification tax_cite(x)  # S3 method for taxa_classification tax_cite(x) <- value  tax_cite(x)  tax_cite(x) <- value  # S3 method for taxa_taxon tax_cite(x)  # S3 method for taxa_taxon tax_cite(x) <- value  # S3 method for taxa_taxon_authority tax_cite(x) <- value  # S3 method for taxa_taxon_authority tax_cite(x)  # S3 method for taxa_taxonomy tax_cite(x)  # S3 method for taxa_taxonomy tax_cite(x) <- value"},{"path":"https://docs.ropensci.org/taxa/reference/tax_cite.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set and get taxon authority citations — tax_cite.taxa_classification","text":"x object taxon authority dates. value taxon citations set. Inputs coerced taxon_authority vector.","code":""},{"path":"https://docs.ropensci.org/taxa/reference/tax_cite.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set and get taxon authority citations — tax_cite.taxa_classification","text":"","code":"x <- taxon_authority(c('Cham. & Schldl.', 'L.'),                      date = c('1827', '1753'),                      citation = c(NA, 'Species Plantarum')) tax_cite(x) #> [1] NA                  \"Species Plantarum\" tax_cite(x)[1] <- \"Cham. et al 1984\""},{"path":"https://docs.ropensci.org/taxa/reference/tax_date.html","id":null,"dir":"Reference","previous_headings":"","what":"Set and get taxon authority dates — tax_date.taxa_classification","title":"Set and get taxon authority dates — tax_date.taxa_classification","text":"Set get taxon authority dates objects , taxon_authority objects.","code":""},{"path":"https://docs.ropensci.org/taxa/reference/tax_date.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set and get taxon authority dates — tax_date.taxa_classification","text":"","code":"# S3 method for taxa_classification tax_date(x)  # S3 method for taxa_classification tax_date(x) <- value  tax_date(x)  tax_date(x) <- value  # S3 method for taxa_taxon tax_date(x)  # S3 method for taxa_taxon tax_date(x) <- value  # S3 method for taxa_taxon_authority tax_date(x) <- value  # S3 method for taxa_taxon_authority tax_date(x)  # S3 method for taxa_taxonomy tax_date(x)  # S3 method for taxa_taxonomy tax_date(x) <- value"},{"path":"https://docs.ropensci.org/taxa/reference/tax_date.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set and get taxon authority dates — tax_date.taxa_classification","text":"x object taxon authority dates. value taxon authority dates set. Inputs coerced character vector.","code":""},{"path":"https://docs.ropensci.org/taxa/reference/tax_date.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set and get taxon authority dates — tax_date.taxa_classification","text":"","code":"x <- taxon_authority(c('Cham. & Schldl.', 'L.'),                      date = c('1827', '1753')) tax_date(x) #> [1] \"1827\" \"1753\" tax_date(x)[1] <- \"1984\" tax_date(x) <- c(NA, '1800')"},{"path":"https://docs.ropensci.org/taxa/reference/tax_db.html","id":null,"dir":"Reference","previous_headings":"","what":"Set and get taxon ID databases — tax_db.taxa_classification","title":"Set and get taxon ID databases — tax_db.taxa_classification","text":"Set get taxon ID databases objects , taxon_id objects.","code":""},{"path":"https://docs.ropensci.org/taxa/reference/tax_db.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set and get taxon ID databases — tax_db.taxa_classification","text":"","code":"# S3 method for taxa_classification tax_db(x)  # S3 method for taxa_classification tax_db(x) <- value  tax_db(x)  tax_db(x) <- value  # S3 method for taxa_taxon tax_db(x)  # S3 method for taxa_taxon tax_db(x) <- value  # S3 method for taxa_taxon_id tax_db(x)  # S3 method for taxa_taxon_id tax_db(x) <- value  # S3 method for taxa_taxonomy tax_db(x)  # S3 method for taxa_taxonomy tax_db(x) <- value"},{"path":"https://docs.ropensci.org/taxa/reference/tax_db.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set and get taxon ID databases — tax_db.taxa_classification","text":"x object taxon authority dates. value taxon citations set. Inputs coerced taxon_db vector.","code":""},{"path":"https://docs.ropensci.org/taxa/reference/tax_db.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set and get taxon ID databases — tax_db.taxa_classification","text":"","code":"x <- taxon_id(c('9606', '1386', '4890', '4345'), db = 'ncbi') tax_db(x) #> <taxon_db[4]> #> [1] ncbi ncbi ncbi ncbi tax_db(x) <- 'nbn' tax_db(x)[2] <- 'itis'"},{"path":"https://docs.ropensci.org/taxa/reference/tax_id.html","id":null,"dir":"Reference","previous_headings":"","what":"Set and get taxon IDs — tax_id.taxa_classification","title":"Set and get taxon IDs — tax_id.taxa_classification","text":"Set get taxon IDs objects , taxon objects.","code":""},{"path":"https://docs.ropensci.org/taxa/reference/tax_id.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set and get taxon IDs — tax_id.taxa_classification","text":"","code":"# S3 method for taxa_classification tax_id(x)  # S3 method for taxa_classification tax_id(x) <- value  tax_id(x)  tax_id(x) <- value  # S3 method for taxa_taxon tax_id(x)  # S3 method for taxa_taxon tax_id(x) <- value  # S3 method for taxa_taxonomy tax_id(x)  # S3 method for taxa_taxonomy tax_id(x) <- value"},{"path":"https://docs.ropensci.org/taxa/reference/tax_id.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set and get taxon IDs — tax_id.taxa_classification","text":"x object taxon IDs. value taxon IDs set. Inputs coerced taxon_id vector.","code":""},{"path":"https://docs.ropensci.org/taxa/reference/tax_id.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set and get taxon IDs — tax_id.taxa_classification","text":"","code":"x <- taxon(name = c('Homo sapiens', 'Bacillus', 'Ascomycota', 'Ericaceae'),            rank = c('species', 'genus', 'phylum', 'family'),            id = taxon_id(c('9606', '1386', '4890', '4345'), db = 'ncbi'),            auth = c('Linnaeus, 1758', 'Cohn 1872', NA, 'Juss., 1789'))  tax_id(x) #> <taxon_id[4]> #> [1] 9606 (ncbi) 1386 (ncbi) 4890 (ncbi) 4345 (ncbi) tax_id(x) <- paste0('00', tax_id(x)) tax_id(x)[1] <- '00000'"},{"path":"https://docs.ropensci.org/taxa/reference/tax_name.html","id":null,"dir":"Reference","previous_headings":"","what":"Set and get taxon names — tax_name.taxa_classification","title":"Set and get taxon names — tax_name.taxa_classification","text":"Set get taxon names objects , taxon objects. Note adding vector names names.","code":""},{"path":"https://docs.ropensci.org/taxa/reference/tax_name.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set and get taxon names — tax_name.taxa_classification","text":"","code":"# S3 method for taxa_classification tax_name(x)  # S3 method for taxa_classification tax_name(x) <- value  tax_name(x)  tax_name(x) <- value  # S3 method for taxa_taxon tax_name(x)  # S3 method for taxa_taxon tax_name(x) <- value  # S3 method for taxa_taxonomy tax_name(x)  # S3 method for taxa_taxonomy tax_name(x) <- value"},{"path":"https://docs.ropensci.org/taxa/reference/tax_name.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set and get taxon names — tax_name.taxa_classification","text":"x object taxon names. value taxon names set. Inputs coerced character vector.","code":""},{"path":"https://docs.ropensci.org/taxa/reference/tax_name.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set and get taxon names — tax_name.taxa_classification","text":"","code":"x <- taxon(name = c('Homo sapiens', 'Bacillus', 'Ascomycota', 'Ericaceae'),            rank = c('species', 'genus', 'phylum', 'family'),            id = taxon_id(c('9606', '1386', '4890', '4345'), db = 'ncbi'),            auth = c('Linnaeus, 1758', 'Cohn 1872', NA, 'Juss., 1789'))  tax_name(x) #> [1] \"Homo sapiens\" \"Bacillus\"     \"Ascomycota\"   \"Ericaceae\"    tax_name(x) <- tolower(tax_name(x)) tax_name(x)[1] <- 'Billy'"},{"path":"https://docs.ropensci.org/taxa/reference/tax_rank.html","id":null,"dir":"Reference","previous_headings":"","what":"Set and get taxon ranks — tax_rank.taxa_classification","title":"Set and get taxon ranks — tax_rank.taxa_classification","text":"Set get taxon ranks objects , taxon objects.","code":""},{"path":"https://docs.ropensci.org/taxa/reference/tax_rank.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set and get taxon ranks — tax_rank.taxa_classification","text":"","code":"# S3 method for taxa_classification tax_rank(x)  # S3 method for taxa_classification tax_rank(x) <- value  tax_rank(x)  tax_rank(x) <- value  # S3 method for taxa_taxon tax_rank(x)  # S3 method for taxa_taxon tax_rank(x) <- value  # S3 method for taxa_taxonomy tax_rank(x)  # S3 method for taxa_taxonomy tax_rank(x) <- value"},{"path":"https://docs.ropensci.org/taxa/reference/tax_rank.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set and get taxon ranks — tax_rank.taxa_classification","text":"x object taxon ranks. value taxon ranks set. Inputs coerced taxon_rank vector.","code":""},{"path":"https://docs.ropensci.org/taxa/reference/tax_rank.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set and get taxon ranks — tax_rank.taxa_classification","text":"","code":"x <- taxon(name = c('Homo sapiens', 'Bacillus', 'Ascomycota', 'Ericaceae'),            rank = c('species', 'genus', 'phylum', 'family'),            id = taxon_id(c('9606', '1386', '4890', '4345'), db = 'ncbi'),            auth = c('Linnaeus, 1758', 'Cohn 1872', NA, 'Juss., 1789'))  tax_rank(x) #> <taxon_rank[4]> #> [1] species genus   phylum  family  #> Rank levels: phylum < family < genus < species tax_rank(x) <- 'species' tax_rank(x)[1] <- taxon_rank('family')"},{"path":"https://docs.ropensci.org/taxa/reference/taxa_casting_funcs.html","id":null,"dir":"Reference","previous_headings":"","what":"taxa casting functions — vec_cast.taxa_classification","title":"taxa casting functions — vec_cast.taxa_classification","text":"Functions used internally casting taxon objects types. exported work, intended directly used users.","code":""},{"path":"https://docs.ropensci.org/taxa/reference/taxa_casting_funcs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"taxa casting functions — vec_cast.taxa_classification","text":"","code":"# S3 method for taxa_classification vec_cast(x, to, ..., x_arg, to_arg)  # S3 method for default vec_cast.taxa_classification(x, to, ..., x_arg, to_arg)  # S3 method for taxa_classification vec_cast.taxa_classification(x, to, ..., x_arg, to_arg)  # S3 method for taxa_classification vec_cast.character(x, to, ..., x_arg, to_arg)  # S3 method for taxa_classification vec_cast.factor(x, to, ..., x_arg, to_arg)  # S3 method for taxa_classification vec_cast.integer(x, to, ..., x_arg, to_arg)  # S3 method for taxa_taxon vec_cast(x, to, ..., x_arg, to_arg)  # S3 method for default vec_cast.taxa_taxon(x, to, ..., x_arg, to_arg)  # S3 method for taxa_taxon vec_cast.taxa_taxon(x, to, ..., x_arg, to_arg)  # S3 method for character vec_cast.taxa_taxon(x, to, ..., x_arg, to_arg)  # S3 method for taxa_taxon vec_cast.character(x, to, ..., x_arg, to_arg)  # S3 method for factor vec_cast.taxa_taxon(x, to, ..., x_arg, to_arg)  # S3 method for taxa_taxon vec_cast.factor(x, to, ..., x_arg, to_arg)  # S3 method for taxa_taxon_authority vec_cast(x, to, ..., x_arg, to_arg)  # S3 method for default vec_cast.taxa_taxon_authority(x, to, ..., x_arg, to_arg)  # S3 method for taxa_taxon_authority vec_cast.taxa_taxon_authority(x, to, ..., x_arg, to_arg)  # S3 method for character vec_cast.taxa_taxon_authority(x, to, ..., x_arg, to_arg)  # S3 method for taxa_taxon_authority vec_cast.character(x, to, ..., x_arg, to_arg)  # S3 method for factor vec_cast.taxa_taxon_authority(x, to, ..., x_arg, to_arg)  # S3 method for taxa_taxon_authority vec_cast.factor(x, to, ..., x_arg, to_arg)  # S3 method for integer vec_cast.taxa_taxon_authority(x, to, ..., x_arg, to_arg)  # S3 method for taxa_taxon_authority vec_cast.data.frame(x, to, ..., x_arg, to_arg)  # S3 method for taxa_taxon_db vec_cast(x, to, ..., x_arg, to_arg)  # S3 method for default vec_cast.taxa_taxon_db(x, to, ..., x_arg, to_arg)  # S3 method for taxa_taxon_db vec_cast.taxa_taxon_db(x, to, ..., x_arg, to_arg)  # S3 method for character vec_cast.taxa_taxon_db(x, to, ..., x_arg, to_arg)  # S3 method for taxa_taxon_db vec_cast.character(x, to, ..., x_arg, to_arg)  # S3 method for factor vec_cast.taxa_taxon_db(x, to, ..., x_arg, to_arg)  # S3 method for taxa_taxon_db vec_cast.factor(x, to, ..., x_arg, to_arg)  # S3 method for taxa_taxon_db_def vec_cast(x, to, ..., x_arg, to_arg)  # S3 method for default vec_cast.taxa_taxon_db_def(x, to, ..., x_arg, to_arg)  # S3 method for taxa_taxon_db_def vec_cast.taxa_taxon_db_def(x, to, ..., x_arg, to_arg)  # S3 method for taxa_taxon_id vec_cast(x, to, ..., x_arg, to_arg)  # S3 method for default vec_cast.taxa_taxon_id(x, to, ..., x_arg, to_arg)  # S3 method for taxa_taxon_id vec_cast.taxa_taxon_id(x, to, ..., x_arg, to_arg)  # S3 method for character vec_cast.taxa_taxon_id(x, to, ..., x_arg, to_arg)  # S3 method for taxa_taxon_id vec_cast.character(x, to, ..., x_arg, to_arg)  # S3 method for factor vec_cast.taxa_taxon_id(x, to, ..., x_arg, to_arg)  # S3 method for taxa_taxon_id vec_cast.factor(x, to, ..., x_arg, to_arg)  # S3 method for integer vec_cast.taxa_taxon_id(x, to, ..., x_arg, to_arg)  # S3 method for taxa_taxon_id vec_cast.integer(x, to, ..., x_arg, to_arg)  # S3 method for double vec_cast.taxa_taxon_id(x, to, ..., x_arg, to_arg)  # S3 method for taxa_taxon_id vec_cast.double(x, to, ..., x_arg, to_arg)  # S3 method for taxa_taxon_id vec_cast.data.frame(x, to, ..., x_arg, to_arg)  # S3 method for taxa_taxon_rank vec_cast(x, to, ..., x_arg, to_arg)  # S3 method for default vec_cast.taxa_taxon_rank(x, to, ..., x_arg, to_arg)  # S3 method for taxa_taxon_rank vec_cast.taxa_taxon_rank(x, to, ..., x_arg, to_arg)  # S3 method for character vec_cast.taxa_taxon_rank(x, to, ..., x_arg, to_arg)  # S3 method for taxa_taxon_rank vec_cast.character(x, to, ..., x_arg, to_arg)  # S3 method for factor vec_cast.taxa_taxon_rank(x, to, ..., x_arg, to_arg)  # S3 method for taxa_taxon_rank vec_cast.factor(x, to, ..., x_arg, to_arg)  # S3 method for double vec_cast.taxa_taxon_rank(x, to, ..., x_arg, to_arg)  # S3 method for taxa_taxon_rank vec_cast.double(x, to, ..., x_arg, to_arg)  # S3 method for taxa_taxon_rank vec_cast.data.frame(x, to, ..., x_arg, to_arg)  # S3 method for taxa_taxon_rank_level vec_cast(x, to, ..., x_arg, to_arg)  # S3 method for default vec_cast.taxa_taxon_rank_level(x, to, ..., x_arg, to_arg)  # S3 method for taxa_taxon_rank_level vec_cast.taxa_taxon_rank_level(x, to, ..., x_arg, to_arg)  # S3 method for character vec_cast.taxa_taxon_rank_level(x, to, ..., x_arg, to_arg)  # S3 method for taxa_taxon_rank_level vec_cast.character(x, to, ..., x_arg, to_arg)  # S3 method for taxa_taxonomy vec_cast(x, to, ..., x_arg, to_arg)  # S3 method for default vec_cast.taxa_taxonomy(x, to, ..., x_arg, to_arg)  # S3 method for taxa_taxonomy vec_cast.taxa_taxonomy(x, to, ..., x_arg, to_arg)  # S3 method for character vec_cast.taxa_taxonomy(x, to, ..., x_arg, to_arg)  # S3 method for taxa_taxonomy vec_cast.character(x, to, ..., x_arg, to_arg)  # S3 method for factor vec_cast.taxa_taxonomy(x, to, ..., x_arg, to_arg)  # S3 method for taxa_taxonomy vec_cast.factor(x, to, ..., x_arg, to_arg)  # S3 method for taxa_taxon vec_cast.taxa_taxonomy(x, to, ..., x_arg, to_arg)  # S3 method for taxa_taxonomy vec_cast.taxa_taxon(x, to, ..., x_arg, to_arg)"},{"path":"https://docs.ropensci.org/taxa/reference/taxa_coercion_funcs.html","id":null,"dir":"Reference","previous_headings":"","what":"taxa coercion functions — vec_ptype2.taxa_classification","title":"taxa coercion functions — vec_ptype2.taxa_classification","text":"Functions used internally coercing taxon objects objects common data types. exported work, intended directly used users.","code":""},{"path":"https://docs.ropensci.org/taxa/reference/taxa_coercion_funcs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"taxa coercion functions — vec_ptype2.taxa_classification","text":"","code":"# S3 method for taxa_classification vec_ptype2(x, y, ...)  # S3 method for default vec_ptype2.taxa_classification(x, y, ..., x_arg = \"\", y_arg = \"\")  # S3 method for vctrs_unspecified vec_ptype2.taxa_classification(x, y, ...)  # S3 method for taxa_classification vec_ptype2.taxa_classification(x, y, ...)  # S3 method for character vec_ptype2.taxa_classification(x, y, ...)  # S3 method for taxa_classification vec_ptype2.character(x, y, ...)  # S3 method for factor vec_ptype2.taxa_classification(x, y, ...)  # S3 method for taxa_classification vec_ptype2.factor(x, y, ...)  # S3 method for taxa_taxon vec_ptype2(x, y, ...)  # S3 method for default vec_ptype2.taxa_taxon(x, y, ..., x_arg = \"\", y_arg = \"\")  # S3 method for vctrs_unspecified vec_ptype2.taxa_taxon(x, y, ...)  # S3 method for taxa_taxon vec_ptype2.taxa_taxon(x, y, ...)  # S3 method for character vec_ptype2.taxa_taxon(x, y, ...)  # S3 method for taxa_taxon vec_ptype2.character(x, y, ...)  # S3 method for factor vec_ptype2.taxa_taxon(x, y, ...)  # S3 method for taxa_taxon vec_ptype2.factor(x, y, ...)  # S3 method for taxa_taxon_authority vec_ptype2(x, y, ...)  # S3 method for default vec_ptype2.taxa_taxon_authority(x, y, ..., x_arg = \"\", y_arg = \"\")  # S3 method for vctrs_unspecified vec_ptype2.taxa_taxon_authority(x, y, ...)  # S3 method for taxa_taxon_authority vec_ptype2.taxa_taxon_authority(x, y, ...)  # S3 method for character vec_ptype2.taxa_taxon_authority(x, y, ...)  # S3 method for taxa_taxon_authority vec_ptype2.character(x, y, ...)  # S3 method for factor vec_ptype2.taxa_taxon_authority(x, y, ...)  # S3 method for taxa_taxon_authority vec_ptype2.factor(x, y, ...)  # S3 method for taxa_taxon_db vec_ptype2(x, y, ...)  # S3 method for default vec_ptype2.taxa_taxon_db(x, y, ..., x_arg = \"\", y_arg = \"\")  # S3 method for vctrs_unspecified vec_ptype2.taxa_taxon_db(x, y, ...)  # S3 method for taxa_taxon_db vec_ptype2.taxa_taxon_db(x, y, ...)  # S3 method for character vec_ptype2.taxa_taxon_db(x, y, ...)  # S3 method for taxa_taxon_db vec_ptype2.character(x, y, ...)  # S3 method for factor vec_ptype2.taxa_taxon_db(x, y, ...)  # S3 method for taxa_taxon_db vec_ptype2.factor(x, y, ...)  # S3 method for taxa_taxon_id vec_ptype2(x, y, ...)  # S3 method for default vec_ptype2.taxa_taxon_id(x, y, ..., x_arg = \"\", y_arg = \"\")  # S3 method for vctrs_unspecified vec_ptype2.taxa_taxon_id(x, y, ...)  # S3 method for taxa_taxon_id vec_ptype2.taxa_taxon_id(x, y, ...)  # S3 method for character vec_ptype2.taxa_taxon_id(x, y, ...)  # S3 method for taxa_taxon_id vec_ptype2.character(x, y, ...)  # S3 method for factor vec_ptype2.taxa_taxon_id(x, y, ...)  # S3 method for taxa_taxon_id vec_ptype2.factor(x, y, ...)  # S3 method for taxa_taxon_rank vec_ptype2(x, y, ...)  # S3 method for default vec_ptype2.taxa_taxon_rank(x, y, ..., x_arg = \"\", y_arg = \"\")  # S3 method for vctrs_unspecified vec_ptype2.taxa_taxon_rank(x, y, ...)  # S3 method for taxa_taxon_rank vec_ptype2.taxa_taxon_rank(x, y, ...)  # S3 method for character vec_ptype2.taxa_taxon_rank(x, y, ...)  # S3 method for taxa_taxon_rank vec_ptype2.character(x, y, ...)  # S3 method for factor vec_ptype2.taxa_taxon_rank(x, y, ...)  # S3 method for taxa_taxon_rank vec_ptype2.factor(x, y, ...)  # S3 method for taxa_taxon_rank_level vec_ptype2(x, y, ...)  # S3 method for default vec_ptype2.taxa_taxon_rank_level(x, y, ..., x_arg = \"\", y_arg = \"\")  # S3 method for vctrs_unspecified vec_ptype2.taxa_taxon_rank_level(x, y, ...)  # S3 method for taxa_taxon_rank_level vec_ptype2.taxa_taxon_rank_level(x, y, ...)  # S3 method for character vec_ptype2.taxa_taxon_rank_level(x, y, ...)  # S3 method for taxa_taxon_rank_level vec_ptype2.character(x, y, ...)  # S3 method for taxa_taxonomy vec_ptype2(x, y, ...)  # S3 method for default vec_ptype2.taxa_taxonomy(x, y, ..., x_arg = \"\", y_arg = \"\")  # S3 method for vctrs_unspecified vec_ptype2.taxa_taxonomy(x, y, ...)  # S3 method for taxa_taxonomy vec_ptype2.taxa_taxonomy(x, y, ...)  # S3 method for character vec_ptype2.taxa_taxonomy(x, y, ...)  # S3 method for taxa_taxonomy vec_ptype2.character(x, y, ...)  # S3 method for factor vec_ptype2.taxa_taxonomy(x, y, ...)  # S3 method for taxa_taxonomy vec_ptype2.factor(x, y, ...)"},{"path":"https://docs.ropensci.org/taxa/reference/taxa_comparison_funcs.html","id":null,"dir":"Reference","previous_headings":"","what":"taxa comparison functions — taxa_comparison_funcs","title":"taxa comparison functions — taxa_comparison_funcs","text":"Functions used internally casting taxon objects types. exported work, intended directly used users.","code":""},{"path":"https://docs.ropensci.org/taxa/reference/taxa_comparison_funcs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"taxa comparison functions — taxa_comparison_funcs","text":"","code":"# S3 method for taxa_taxon vec_proxy_equal(x, ...)  # S3 method for taxa_taxon_authority vec_proxy_equal(x, ...)  # S3 method for taxa_taxon_id vec_proxy_equal(x, ...)  # S3 method for taxa_taxon_rank vec_proxy_compare(x, ...)  # S3 method for taxa_taxon_rank vec_proxy_equal(x, ...)  # S3 method for taxa_taxon_rank Ops(e1, e2)  # S3 method for taxa_taxonomy vec_proxy_equal(x, ...)"},{"path":"https://docs.ropensci.org/taxa/reference/taxa_printing_funcs.html","id":null,"dir":"Reference","previous_headings":"","what":"taxa printing functions — format.taxa_classification","title":"taxa printing functions — format.taxa_classification","text":"Functions used internally printing information taxon objects. exported work, intended directly used users.","code":""},{"path":"https://docs.ropensci.org/taxa/reference/taxa_printing_funcs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"taxa printing functions — format.taxa_classification","text":"","code":"# S3 method for taxa_classification format(x, ...)  # S3 method for taxa_classification obj_print_data(x, ...)  # S3 method for taxa_classification obj_print_footer(x, ...)  # S3 method for taxa_classification vec_ptype_abbr(x, ...)  # S3 method for taxa_classification vec_ptype_full(x, ...)  # S3 method for taxa_classification pillar_shaft(x, ...)  # S3 method for taxa_taxon format(x, ...)  # S3 method for taxa_taxon obj_print_data(x, ...)  # S3 method for taxa_taxon obj_print_footer(x, ...)  # S3 method for taxa_taxon vec_ptype_abbr(x, ...)  # S3 method for taxa_taxon vec_ptype_full(x, ...)  # S3 method for taxa_taxon pillar_shaft(x, ...)  # S3 method for taxa_taxon_authority format(x, ...)  # S3 method for taxa_taxon_authority obj_print_data(x, ...)  # S3 method for taxa_taxon_authority vec_ptype_abbr(x, ...)  # S3 method for taxa_taxon_authority vec_ptype_full(x, ...)  # S3 method for taxa_taxon_authority pillar_shaft(x, ...)  # S3 method for taxa_taxon_db format(x, ...)  # S3 method for taxa_taxon_db vec_ptype_abbr(x, ...)  # S3 method for taxa_taxon_db vec_ptype_full(x, ...)  # S3 method for taxa_taxon_db_def obj_print_data(x, ...)  # S3 method for taxa_taxon_db_def vec_ptype_full(x, ...)  # S3 method for taxa_taxon_id format(x, ...)  # S3 method for taxa_taxon_id obj_print_data(x, ...)  # S3 method for taxa_taxon_id vec_ptype_abbr(x, ...)  # S3 method for taxa_taxon_id vec_ptype_full(x, ...)  # S3 method for taxa_taxon_id pillar_shaft(x, ...)  # S3 method for taxa_taxon_rank format(x, ...)  # S3 method for taxa_taxon_rank obj_print_data(x, ...)  # S3 method for taxa_taxon_rank obj_print_footer(x, ...)  # S3 method for taxa_taxon_rank vec_ptype_abbr(x, ...)  # S3 method for taxa_taxon_rank vec_ptype_full(x, ...)  # S3 method for taxa_taxon_rank pillar_shaft(x, ...)  # S3 method for taxa_taxon_rank_level format(x, ...)  # S3 method for taxa_taxon_rank_level obj_print_data(x, ...)  # S3 method for taxa_taxon_rank_level vec_ptype_abbr(x, ...)  # S3 method for taxa_taxon_rank_level vec_ptype_full(x, ...)  # S3 method for taxa_taxon_rank_level toString(x, ...)  # S3 method for taxa_taxonomy format(x, ...)  # S3 method for taxa_taxonomy obj_print_data(x, ...)  # S3 method for taxa_taxonomy obj_print_footer(x, ...)  # S3 method for taxa_taxonomy vec_ptype_abbr(x, ...)  # S3 method for taxa_taxonomy vec_ptype_full(x, ...)  # S3 method for taxa_taxonomy pillar_shaft(x, ...)"},{"path":"https://docs.ropensci.org/taxa/reference/taxa_taxon.html","id":null,"dir":"Reference","previous_headings":"","what":"Taxon class — taxa_taxon-class","title":"Taxon class — taxa_taxon-class","text":"Taxon class. See taxon information","code":""},{"path":"https://docs.ropensci.org/taxa/reference/taxa_taxon_authority.html","id":null,"dir":"Reference","previous_headings":"","what":"Taxon authority class — taxa_taxon_authority-class","title":"Taxon authority class — taxa_taxon_authority-class","text":"Taxon authority class. See taxon_authority information","code":""},{"path":"https://docs.ropensci.org/taxa/reference/taxa_taxon_db.html","id":null,"dir":"Reference","previous_headings":"","what":"Taxon database class — taxa_taxon_db-class","title":"Taxon database class — taxa_taxon_db-class","text":"Taxon database class. See taxon_db information","code":""},{"path":"https://docs.ropensci.org/taxa/reference/taxa_taxon_id.html","id":null,"dir":"Reference","previous_headings":"","what":"Taxon ID class — taxa_taxon_id-class","title":"Taxon ID class — taxa_taxon_id-class","text":"Taxon ID class. See taxon_id information","code":""},{"path":"https://docs.ropensci.org/taxa/reference/taxa_taxon_rank.html","id":null,"dir":"Reference","previous_headings":"","what":"Taxon rank class — taxa_taxon_rank-class","title":"Taxon rank class — taxa_taxon_rank-class","text":"Taxon rank class. See taxon_rank information","code":""},{"path":"https://docs.ropensci.org/taxa/reference/taxa_taxonomy.html","id":null,"dir":"Reference","previous_headings":"","what":"Taxonomy class — taxa_taxonomy-class","title":"Taxonomy class — taxa_taxonomy-class","text":"Taxonomy class. See taxonomy information","code":""},{"path":"https://docs.ropensci.org/taxa/reference/taxon.html","id":null,"dir":"Reference","previous_headings":"","what":"Taxon class — taxon","title":"Taxon class — taxon","text":"Used store information taxa, names, ranks, IDs.","code":""},{"path":"https://docs.ropensci.org/taxa/reference/taxon.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Taxon class — taxon","text":"","code":"taxon(name = character(0), rank = NA, id = NA, auth = NA, .names = NA, ...)"},{"path":"https://docs.ropensci.org/taxa/reference/taxon.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Taxon class — taxon","text":"name names taxa. Inputs coerced character vector anything else given. rank ranks taxa. Inputs coerced taxon_rank vector anything else given. id ids taxa. unique identifier usually associated database. Inputs coerced taxon_id vector anything else given. auth authority taxon. Inputs coerced taxon_authority vector anything else given. .names names vector. ... Additional arguments.","code":""},{"path":"https://docs.ropensci.org/taxa/reference/taxon.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Taxon class — taxon","text":"S3 object class taxa_taxon","code":""},{"path":[]},{"path":"https://docs.ropensci.org/taxa/reference/taxon.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Taxon class — taxon","text":"","code":"# Create taxon name vector x <- taxon(c('A', 'B', 'C')) x <- taxon(name = c('Homo sapiens', 'Bacillus', 'Ascomycota', 'Ericaceae'),            rank = c('species', 'genus', 'phylum', 'family'),            id = taxon_id(c('9606', '1386', '4890', '4345'), db = 'ncbi'),            auth = c('Linnaeus, 1758', 'Cohn 1872', NA, 'Juss., 1789')) names(x) <- c('a', 'b', 'c', 'd')  # Get parts of the taxon name vector tax_name(x) #>              a              b              c              d  #> \"Homo sapiens\"     \"Bacillus\"   \"Ascomycota\"    \"Ericaceae\"  tax_rank(x) #> <taxon_rank[4]> #>       a       b       c       d  #> species   genus  phylum  family  #> Rank levels: phylum < family < genus < species tax_id(x) #> <taxon_id[4]> #>           a           b           c           d  #> 9606 (ncbi) 1386 (ncbi) 4890 (ncbi) 4345 (ncbi)  tax_db(x) #> <taxon_db[4]> #>    a    b    c    d  #> ncbi ncbi ncbi ncbi  tax_auth(x) #> <taxon_authority[4]> #>             a             b             c             d  #> Linnaeus 1758     Cohn 1872           NA     Juss. 1789  tax_author(x) #>          a          b          c          d  #> \"Linnaeus\"     \"Cohn\"         NA    \"Juss.\"  tax_date(x) #>      a      b      c      d  #> \"1758\" \"1872\"     \"\" \"1789\"  tax_cite(x) #>  a  b  c  d  #> \"\" \"\" \"\" \"\"   # Set parts of the taxon name vector tax_name(x) <- tolower(tax_name(x)) tax_rank(x)[1] <- NA tax_name(x)['b'] <- 'Billy' tax_id(x) <- '9999' tax_db(x) <- 'itis' tax_auth(x) <- NA tax_author(x)[2:3] <- c('Joe', 'Billy') tax_date(x) <- c('1999', '2013', '1796', '1899') tax_cite(x)[1] <- 'Linnaeus, C. (1771). Mantissa plantarum altera generum.'  # Manipulate taxon name vectors x[1:3] #> <taxon[3]> #>                                 a                                 b  #>         9999|homo sapiens NA 1999         9999|Billy Joe 2013|genus  #>                                 c  #> 9999|ascomycota Billy 1796|phylum  #> Rank levels: phylum < family < genus < species x[tax_rank(x) > 'family'] #> <taxon[2]> #>                      <NA>                         b  #>                        NA 9999|Billy Joe 2013|genus  #> Rank levels: phylum < family < genus < species x['b'] <- NA x[c('c', 'd')] <- 'unknown' is.na(x) #> [1] FALSE  TRUE FALSE FALSE  # Use as columns in tables tibble::tibble(x = x, y = 1:4) #> # A tibble: 4 × 2 #>   x                             y #>   <taxon>                   <int> #> 1 9999|homo sapiens NA 1999     1 #> 2 NA                            2 #> 3 unknown                       3 #> 4 unknown                       4 data.frame(x = x, y = 1:4) #>                           x y #> 1 9999|homo sapiens NA 1999 1 #> 2                        NA 2 #> 3                   unknown 3 #> 4                   unknown 4  # Converting to tables tibble::as_tibble(x) #> # A tibble: 4 × 7 #>   tax_name     tax_rank tax_id tax_db tax_author tax_date tax_cite               #>   <chr>        <chr>    <chr>  <chr>  <chr>      <chr>    <chr>                  #> 1 homo sapiens NA       9999   itis   NA         1999     Linnaeus, C. (1771). … #> 2 NA           NA       NA     NA     NA         NA       NA                     #> 3 unknown      NA       NA     NA     NA         NA       NA                     #> 4 unknown      NA       NA     NA     NA         NA       NA                     as_data_frame(x) #>       tax_name tax_rank tax_id tax_db tax_author tax_date #> 1 homo sapiens     <NA>   9999   itis       <NA>     1999 #> 2         <NA>     <NA>   <NA>   <NA>       <NA>     <NA> #> 3      unknown     <NA>   <NA>   <NA>       <NA>     <NA> #> 4      unknown     <NA>   <NA>   <NA>       <NA>     <NA> #>                                                  tax_cite #> 1 Linnaeus, C. (1771). Mantissa plantarum altera generum. #> 2                                                    <NA> #> 3                                                    <NA> #> 4                                                    <NA>"},{"path":"https://docs.ropensci.org/taxa/reference/taxon_authority.html","id":null,"dir":"Reference","previous_headings":"","what":"Taxon authority class — taxon_authority","title":"Taxon authority class — taxon_authority","text":"Used store information taxon authorities, author names, date, citation.","code":""},{"path":"https://docs.ropensci.org/taxa/reference/taxon_authority.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Taxon authority class — taxon_authority","text":"","code":"taxon_authority(   author = character(),   date = \"\",   citation = \"\",   .names = \"\",   extract_date = TRUE )"},{"path":"https://docs.ropensci.org/taxa/reference/taxon_authority.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Taxon authority class — taxon_authority","text":"author Zero author names. date Zero dates. citation Zero literature citations. .names names vector. extract_date TRUE (default), date detected author input date input given, date separated author input.","code":""},{"path":"https://docs.ropensci.org/taxa/reference/taxon_authority.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Taxon authority class — taxon_authority","text":"S3 object class taxa_taxon_authority","code":""},{"path":[]},{"path":"https://docs.ropensci.org/taxa/reference/taxon_authority.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Taxon authority class — taxon_authority","text":"","code":"# Making new objects x <- taxon_authority(c('A', 'B', 'C')) x <- taxon_authority(c('Cham. & Schldl.', 'L.'),                      date = c('1827', '1753'))  # Manipulating objects as.character(x) #> [1] \"Cham. & Schldl. 1827\" \"L. 1753\"              x[2] #> <taxon_authority[1]> #> [1] L. 1753 x[2] <- 'ABC' names(x) <- c('a', 'b') x['b'] <- 'David Bowie' tax_author(x)[1] <- tolower(tax_author(x)[1]) tax_author(x) #>                 a                 b  #> \"cham. & schldl.\"     \"David Bowie\"  tax_date(x) <- c('2000', '1234') tax_date(x) #>      a      b  #> \"2000\" \"1234\"  tax_cite(x)[2] <- c('Linnaeus, C. (1771). Mantissa plantarum altera generum.') tax_cite(x) #>                                                         a  #>                                                        \"\"  #>                                                         b  #> \"Linnaeus, C. (1771). Mantissa plantarum altera generum.\"   # Using as columns in tables tibble::tibble(x = x, y = 1:2) #> # A tibble: 2 × 2 #>   x                        y #>   <tax_auth>           <int> #> 1 cham. & schldl. 2000     1 #> 2 David Bowie 1234         2 data.frame(x = x, y = 1:2) #>                      x y #> 1 cham. & schldl. 2000 1 #> 2     David Bowie 1234 2  # Converting to tables tibble::as_tibble(x) #> # A tibble: 2 × 3 #>   tax_author      tax_date tax_cite                                              #>   <chr>           <chr>    <chr>                                                 #> 1 cham. & schldl. 2000     \"\"                                                    #> 2 David Bowie     1234     \"Linnaeus, C. (1771). Mantissa plantarum altera gene… as_data_frame(x) #>        tax_author tax_date #> 1 cham. & schldl.     2000 #> 2     David Bowie     1234 #>                                                  tax_cite #> 1                                                         #> 2 Linnaeus, C. (1771). Mantissa plantarum altera generum."},{"path":"https://docs.ropensci.org/taxa/reference/taxon_db.html","id":null,"dir":"Reference","previous_headings":"","what":"Taxon database class — taxon_db","title":"Taxon database class — taxon_db","text":"Used store names taxon databases defined db_ref. Primarily used classes like taxon_id define databases item.","code":""},{"path":"https://docs.ropensci.org/taxa/reference/taxon_db.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Taxon database class — taxon_db","text":"","code":"taxon_db(db = character(), .names = NULL, ...)"},{"path":"https://docs.ropensci.org/taxa/reference/taxon_db.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Taxon database class — taxon_db","text":"db Zero taxonomic database names. name contained db_ref. Inputs transformed character vector possible. .names names vector. ... Additional arguments.","code":""},{"path":"https://docs.ropensci.org/taxa/reference/taxon_db.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Taxon database class — taxon_db","text":"S3 object class taxa_taxon_db","code":""},{"path":[]},{"path":"https://docs.ropensci.org/taxa/reference/taxon_db.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Taxon database class — taxon_db","text":"","code":"# Making new objects x <- taxon_db(c('ncbi', 'ncbi', 'itis')) x #> <taxon_db[3]> #> [1] ncbi ncbi itis  # Manipulating objects as.character(x) #> [1] \"ncbi\" \"ncbi\" \"itis\" x[2:3] #> <taxon_db[2]> #> [1] ncbi itis x[2:3] <- 'nbn' names(x) <- c('a', 'b', 'c') x['b'] #> <taxon_db[1]> #>   b  #> nbn  x['b'] <- 'nbn' x[x == 'itis'] <- 'gbif'  # Using as columns in tables tibble::tibble(x = x, y = 1:3) #> # A tibble: 3 × 2 #>   x            y #>   <tax_db> <int> #> 1 ncbi         1 #> 2  nbn         2 #> 3  nbn         3 data.frame(x = x, y = 1:3) #>      x y #> 1 ncbi 1 #> 2  nbn 2 #> 3  nbn 3  # Converting to tables tibble::as_tibble(x) #> # A tibble: 3 × 1 #>   tax_db #>   <chr>  #> 1 ncbi   #> 2 nbn    #> 3 nbn    as_data_frame(x) #>   tax_db #> 1   ncbi #> 2    nbn #> 3    nbn  # Trying to use an invalid database generates an error # x <- taxon_db(c('ncbi', 'ncbi', 'my_custom_db')) # x[x == 'itis'] <- 'my_custom_db'  # Listing known databases and their properties db_ref$get() #> <taxon_db_def[8]> #>    _____________________ ncbi ______________________ #>    url:         http://www.ncbi.nlm.nih.gov/taxonomy #>    desc:        NCBI Taxonomy Database               #>    id_regex:    [0-9]+                               #>    rank_levels:                                      #>  #>    _____________________________ gbif _____________________________ #>    url:         http://www.gbif.org/developer/species               #>    desc:        GBIF Taxonomic Backbone                             #>    id_regex:    [0-9]+                                              #>    rank_levels: kingdom < phylum < order < family < genus < species #>  #>    _________________________________ bold _________________________________ #>    url:         http://www.boldsystems.org                                  #>    desc:        Barcode of Life                                             #>    id_regex:    [0-9]+                                                      #>    rank_levels: phylum < class < order < family < subfamily < genus < spec… #>  #>    ___________________ col ___________________ #>    url:         http://www.catalogueoflife.org #>    desc:        Catalogue of Life              #>    id_regex:    [a-z0-9]{32}                   #>    rank_levels:                                #>  #>    ______________ eol ______________ #>    url:         http://eol.org       #>    desc:        Encyclopedia of Life #>    id_regex:    [0-9]+               #>    rank_levels:                      #>  #>    ____________________ nbn ____________________ #>    url:         https://nbn.org.uk               #>    desc:        UK National Biodiversity Network #>    id_regex:    [A-Z]{5}[0-9]{10}                #>    rank_levels:                                  #>  #>    ________________ tps ________________ #>    url:         http://www.tropicos.org/ #>    desc:        Tropicos                 #>    id_regex:    [0-9]+                   #>    rank_levels:                          #>  #>    _______________________ itis _______________________ #>    url:         http://www.itis.gov                     #>    desc:        Integrated Taxonomic Information System #>    id_regex:    [0-9]+                                  #>    rank_levels:                                          # Adding and using a new database db_ref$set(name = 'my_custom_db', desc = 'I just made this up') db_ref$get() #> <taxon_db_def[9]> #>    _____________________ ncbi ______________________ #>    url:         http://www.ncbi.nlm.nih.gov/taxonomy #>    desc:        NCBI Taxonomy Database               #>    id_regex:    [0-9]+                               #>    rank_levels:                                      #>  #>    _____________________________ gbif _____________________________ #>    url:         http://www.gbif.org/developer/species               #>    desc:        GBIF Taxonomic Backbone                             #>    id_regex:    [0-9]+                                              #>    rank_levels: kingdom < phylum < order < family < genus < species #>  #>    _________________________________ bold _________________________________ #>    url:         http://www.boldsystems.org                                  #>    desc:        Barcode of Life                                             #>    id_regex:    [0-9]+                                                      #>    rank_levels: phylum < class < order < family < subfamily < genus < spec… #>  #>    ___________________ col ___________________ #>    url:         http://www.catalogueoflife.org #>    desc:        Catalogue of Life              #>    id_regex:    [a-z0-9]{32}                   #>    rank_levels:                                #>  #>    ______________ eol ______________ #>    url:         http://eol.org       #>    desc:        Encyclopedia of Life #>    id_regex:    [0-9]+               #>    rank_levels:                      #>  #>    ____________________ nbn ____________________ #>    url:         https://nbn.org.uk               #>    desc:        UK National Biodiversity Network #>    id_regex:    [A-Z]{5}[0-9]{10}                #>    rank_levels:                                  #>  #>    ________________ tps ________________ #>    url:         http://www.tropicos.org/ #>    desc:        Tropicos                 #>    id_regex:    [0-9]+                   #>    rank_levels:                          #>  #>    _______________________ itis _______________________ #>    url:         http://www.itis.gov                     #>    desc:        Integrated Taxonomic Information System #>    id_regex:    [0-9]+                                  #>    rank_levels:                                         #>  #>    _________ my_custom_db _________ #>    url:         NA                  #>    desc:        I just made this up #>    id_regex:    NA                  #>    rank_levels:                     x <- taxon_db(c('ncbi', 'ncbi', 'my_custom_db'))"},{"path":"https://docs.ropensci.org/taxa/reference/taxon_db_def.html","id":null,"dir":"Reference","previous_headings":"","what":"Taxon database definition class — taxon_db_def","title":"Taxon database definition class — taxon_db_def","text":"Used store information taxonomic databases used validate information classes.","code":""},{"path":"https://docs.ropensci.org/taxa/reference/taxon_db_def.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Taxon database definition class — taxon_db_def","text":"","code":"taxon_db_def(   name = character(),   url = NA_character_,   desc = NA_character_,   id_regex = NA_character_,   rank_levels = rep(list(NULL), length(name)) )"},{"path":"https://docs.ropensci.org/taxa/reference/taxon_db_def.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Taxon database definition class — taxon_db_def","text":"name Name database lower case. Inputs transformed character vector. url URL database website. Inputs transformed character vector. desc Description database. Inputs transformed character vector. id_regex regular expression taxon IDs database. Inputs transformed character vector. rank_levels Valid taxonomic ranks database. list numeric vectors named taxonomic ranks.","code":""},{"path":"https://docs.ropensci.org/taxa/reference/taxon_db_def.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Taxon database definition class — taxon_db_def","text":"S3 object class taxa_taxon_db_def","code":""},{"path":"https://docs.ropensci.org/taxa/reference/taxon_id.html","id":null,"dir":"Reference","previous_headings":"","what":"Taxon ID class — taxon_id","title":"Taxon ID class — taxon_id","text":"Used store ID corresponding taxa, either arbitrary particular taxonomy database. typically used store taxon IDs taxon objects.","code":""},{"path":"https://docs.ropensci.org/taxa/reference/taxon_id.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Taxon ID class — taxon_id","text":"","code":"taxon_id(id = character(), db = \"\", .names = NULL)"},{"path":"https://docs.ropensci.org/taxa/reference/taxon_id.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Taxon ID class — taxon_id","text":"id Zero taxonomic ids. Inputs transformed character vector possible. db name(s) database(s) associated IDs. NA (default), input must consist names databases db_ref$get(). .names names applied vector.","code":""},{"path":"https://docs.ropensci.org/taxa/reference/taxon_id.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Taxon ID class — taxon_id","text":"S3 object class taxa_taxon_id","code":""},{"path":[]},{"path":"https://docs.ropensci.org/taxa/reference/taxon_id.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Taxon ID class — taxon_id","text":"","code":"# Making new objects x <- taxon_id(c('A', 'B', 'C')) x <- taxon_id(c('9606', '1386', '4890', '4345'), db = 'ncbi') x <- taxon_id(c('9606', '1386', '4890', '4345'),               db = c('ncbi', 'ncbi', 'itis', 'itis')) names(x) <- c('a', 'b', 'c', 'd')  # Manipulating objects as.character(x) #>      a      b      c      d  #> \"9606\" \"1386\" \"4890\" \"4345\"  x[2:3] #> <taxon_id[2]> #>           b           c  #> 1386 (ncbi) 4890 (itis)  x[2:3] <- 'ABC' x[c('a', 'c')] <- '123' x[['b']] <- taxon_id('123423', db = 'ncbi') tax_db(x) #> <taxon_db[4]> #>    a    b    c    d  #>      ncbi      itis  tax_db(x) <- 'nbn' c(x, x) #> <taxon_id[8]> #>            a            b            c            d            a            b  #>    123 (nbn) 123423 (nbn)    123 (nbn)   4345 (nbn)    123 (nbn) 123423 (nbn)  #>            c            d  #>    123 (nbn)   4345 (nbn)   # Using as columns in tables tibble::tibble(x = x, y = 1:4) #> # A tibble: 4 × 2 #>   x                y #>   <tax_id>     <int> #> 1 123 (nbn)        1 #> 2 123423 (nbn)     2 #> 3 123 (nbn)        3 #> 4 4345 (nbn)       4 data.frame(x = x, y = 1:4) #>              x y #> 1    123 (nbn) 1 #> 2 123423 (nbn) 2 #> 3    123 (nbn) 3 #> 4   4345 (nbn) 4  # Convert to tables tibble::as_tibble(x) #> # A tibble: 4 × 2 #>   tax_id tax_db #>   <chr>  <chr>  #> 1 123    nbn    #> 2 123423 nbn    #> 3 123    nbn    #> 4 4345   nbn    as_data_frame(x) #>   tax_id tax_db #> 1    123    nbn #> 2 123423    nbn #> 3    123    nbn #> 4   4345    nbn  # Trying to use an invalid ID with a specified database causes an error #taxon_id('NOLETTERS', db = 'ncbi')"},{"path":"https://docs.ropensci.org/taxa/reference/taxon_rank.html","id":null,"dir":"Reference","previous_headings":"","what":"Taxon rank class — taxon_rank","title":"Taxon rank class — taxon_rank","text":"Used store taxon ranks, possibly associated taxonomy database. typically used store taxon ranks taxon objects.","code":""},{"path":"https://docs.ropensci.org/taxa/reference/taxon_rank.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Taxon rank class — taxon_rank","text":"","code":"taxon_rank(   rank = character(),   .names = NULL,   levels = NULL,   guess_order = TRUE )"},{"path":"https://docs.ropensci.org/taxa/reference/taxon_rank.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Taxon rank class — taxon_rank","text":"rank Zero taxonomic rank names. Inputs transformed character vector. .names names vector levels named numeric vector indicating names orders possible taxonomic ranks. Higher numbers indicate fine-scale groupings. Ranks unknown order can indicated NA instead number. guess_order TRUE rank order given using numbers, try guess order based rank names.","code":""},{"path":"https://docs.ropensci.org/taxa/reference/taxon_rank.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Taxon rank class — taxon_rank","text":"S3 object class taxa_taxon_rank","code":""},{"path":[]},{"path":"https://docs.ropensci.org/taxa/reference/taxon_rank.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Taxon rank class — taxon_rank","text":"","code":"# Making new objects x <- taxon_rank(c('species', 'species', 'phylum', 'family'))  # Specifiying level order taxon_rank(c('A', 'B', 'C', 'D', 'A', 'D', 'D'),            levels = c('D', 'C', 'B', 'A')) #> <taxon_rank[7]> #> [1] A B C D A D D #> Rank levels: D < C < B < A taxon_rank(c('A', 'B', 'C', 'D', 'A', 'D', 'D'),            levels = c(D = NA, A = 10, B = 20, C = 30)) #> <taxon_rank[7]> #> [1] A B C D A D D #> Rank levels: A < B < C ? D names(x) <- c('a', 'b', 'c', 'd')  # Manipulating objects as.character(x) #>         a         b         c         d  #> \"species\" \"species\"  \"phylum\"  \"family\"  as.factor(x) #>       a       b       c       d  #> species species  phylum  family  #> Levels: phylum family species as.ordered(x) #>       a       b       c       d  #> species species  phylum  family  #> Levels: phylum < family < species x[2:3] #> <taxon_rank[2]> #>       b       c  #> species  phylum  #> Rank levels: phylum < family < species x[x > 'family'] <- taxon_rank('unknown') x[1] <- taxon_rank('order') x['b'] #> <taxon_rank[1]> #>       b  #> unknown  #> Rank levels: phylum < order < family < species ? unknown x['b'] <- 'order'  # Using as columns in tables tibble::tibble(x = x, y = 1:4) #> # A tibble: 4 × 2 #>   x              y #>   <tax_rank> <int> #> 1 order          1 #> 2 order          2 #> 3 phylum         3 #> 4 family         4 data.frame(x = x, y = 1:4) #>        x y #> 1  order 1 #> 2  order 2 #> 3 phylum 3 #> 4 family 4  # Converting to tables tibble::as_tibble(x) #> # A tibble: 4 × 1 #>   tax_rank #>   <chr>    #> 1 order    #> 2 order    #> 3 phylum   #> 4 family   as_data_frame(x) #>   tax_rank #> 1    order #> 2    order #> 3   phylum #> 4   family  # Trying to add an unknown level as a character causes an error #x[2] <- 'superkingdom'  # But you can add a new level using taxon_rank objects x[2] <- taxon_rank('superkingdom')"},{"path":"https://docs.ropensci.org/taxa/reference/taxon_rank_level.html","id":null,"dir":"Reference","previous_headings":"","what":"Taxon rank level — taxon_rank_level","title":"Taxon rank level — taxon_rank_level","text":"Used store taxon rank level information. used taxon_rank() objects.","code":""},{"path":"https://docs.ropensci.org/taxa/reference/taxon_rank_level.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Taxon rank level — taxon_rank_level","text":"","code":"taxon_rank_level(   level = character(),   order = NULL,   guess_order = TRUE,   impute_na = FALSE )"},{"path":"https://docs.ropensci.org/taxa/reference/taxon_rank_level.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Taxon rank level — taxon_rank_level","text":"level Zero taxonomic rank names. named numeric applied, names used levels numeric values used order. Inputs transformed character vector. order Integers determine relative order taxonomic levels. Inputs transformed integer vector. NAs can used indicate order known. guess_order TRUE order given, try guess order based rank names. impute_na TRUE, fill NAs based nearby values (assumed ascending order).","code":""},{"path":"https://docs.ropensci.org/taxa/reference/taxon_rank_level.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Taxon rank level — taxon_rank_level","text":"S3 object class taxa_taxon_rank_level","code":""},{"path":"https://docs.ropensci.org/taxa/reference/taxonomy.html","id":null,"dir":"Reference","previous_headings":"","what":"Taxonomy class — [.taxa_classification","title":"Taxonomy class — [.taxa_classification","text":"Used store information set taxa forming taxonomic tree.","code":""},{"path":"https://docs.ropensci.org/taxa/reference/taxonomy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Taxonomy class — [.taxa_classification","text":"","code":"# S3 method for taxa_classification [(x, ...)  # S3 method for taxa_classification [[(x, i)  taxonomy(taxa = taxon(), supertaxa = NA, .names = NULL)  # S3 method for taxa_taxonomy names(x)  # S3 method for taxa_taxonomy names(x) <- value  # S3 method for taxa_taxonomy [(x, ..., subtaxa = TRUE, supertaxa = FALSE, invert = FALSE)  # S3 method for taxa_taxonomy [[(x, i, ..., subtaxa = TRUE, supertaxa = FALSE, invert = FALSE)"},{"path":"https://docs.ropensci.org/taxa/reference/taxonomy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Taxonomy class — [.taxa_classification","text":"taxa taxon vector something can converted taxon vector. supertaxa indexes taxa taxon's supertaxon. .names names vector (names taxa).","code":""},{"path":"https://docs.ropensci.org/taxa/reference/taxonomy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Taxonomy class — [.taxa_classification","text":"S3 object class taxa_taxon","code":""},{"path":[]},{"path":"https://docs.ropensci.org/taxa/reference/taxonomy.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Taxonomy class — [.taxa_classification","text":"","code":"x <- taxonomy(c('Carnivora', 'Felidae', 'Panthera', 'Panthera leo',                 'Panthera tigris', 'Ursidae', 'Ursus', 'Ursus arctos'),               supertaxa = c(NA, 1, 2, 3, 3, 1, 6, 7))  x <- taxonomy(taxon(name = c('Carnivora', 'Felidae', 'Panthera', 'Panthera leo',                              'Panthera tigris', 'Ursidae', 'Ursus', 'Ursus arctos'),                     rank = c('order', 'family', 'genus', 'species',                              'species', 'family', 'genus', 'species'),                     id = taxon_id(c('33554', '9681', '9688', '9689',                                     '9694', '9632', '9639', '9644'),                                   db = 'ncbi'),                     auth = c('Bowdich, 1821', 'Fischer de Waldheim, 1817', 'Oken, 1816', 'L., 1758',                              'L., 1758', 'Fischer de Waldheim, 1817', 'L., 1758', 'L., 1758')),               supertaxa = c(NA, 1, 2, 3, 3, 1, 6, 7)) names(x) <- letters[1:8]  # Subset taxonomy vector x[2] # By default, all subtaxa are included #> <taxonomy[4]> #> 1[b]: 9681|Felidae Fischer de Waldheim 1817|family #> └─2[c]: 9688|Panthera Oken 1816|genus #>   ├─3[d]: 9689|Panthera leo L. 1758|species #>   └─4[e]: 9694|Panthera tigris L. 1758|species #> Rank levels: order < family < genus < species x['b'] # Names can also be used #> <taxonomy[4]> #> 1[b]: 9681|Felidae Fischer de Waldheim 1817|family #> └─2[c]: 9688|Panthera Oken 1816|genus #>   ├─3[d]: 9689|Panthera leo L. 1758|species #>   └─4[e]: 9694|Panthera tigris L. 1758|species #> Rank levels: order < family < genus < species x[2:3, subtaxa = FALSE] # Disable subtaxa #> <taxonomy[2]> #> 1[b]: 9681|Felidae Fischer de Waldheim 1817|family #> └─2[c]: 9688|Panthera Oken 1816|genus #> Rank levels: order < family < genus < species x[3, supertaxa = TRUE] # include supertaxa #> <taxonomy[5]> #> 1[a]: 33554|Carnivora Bowdich 1821|order #> └─2[b]: 9681|Felidae Fischer de Waldheim 1817|family #>   └─3[c]: 9688|Panthera Oken 1816|genus #>     ├─4[d]: 9689|Panthera leo L. 1758|species #>     └─5[e]: 9694|Panthera tigris L. 1758|species #> Rank levels: order < family < genus < species x[is_leaf(x)] # Subset by logical vector #> <taxonomy[3]> #> 1[d]: 9689|Panthera leo L. 1758|species #> 2[e]: 9694|Panthera tigris L. 1758|species #> 3[h]: 9644|Ursus arctos L. 1758|species #> Rank levels: order < family < genus < species  # Get parts of the taxonomy vector tax_name(x) #>                 a                 b                 c                 d  #>       \"Carnivora\"         \"Felidae\"        \"Panthera\"    \"Panthera leo\"  #>                 e                 f                 g                 h  #> \"Panthera tigris\"         \"Ursidae\"           \"Ursus\"    \"Ursus arctos\"  tax_rank(x) #> <taxon_rank[8]> #>       a       b       c       d       e       f       g       h  #>   order  family   genus species species  family   genus species  #> Rank levels: order < family < genus < species tax_id(x) #> <taxon_id[8]> #>            a            b            c            d            e            f  #> 33554 (ncbi)  9681 (ncbi)  9688 (ncbi)  9689 (ncbi)  9694 (ncbi)  9632 (ncbi)  #>            g            h  #>  9639 (ncbi)  9644 (ncbi)  tax_db(x) #> <taxon_db[8]> #>    a    b    c    d    e    f    g    h  #> ncbi ncbi ncbi ncbi ncbi ncbi ncbi ncbi  tax_auth(x) #> <taxon_authority[8]> #>                        a                        b                        c  #>             Bowdich 1821 Fischer de Waldheim 1817                Oken 1816  #>                        d                        e                        f  #>                  L. 1758                  L. 1758 Fischer de Waldheim 1817  #>                        g                        h  #>                  L. 1758                  L. 1758  tax_author(x) #>                     a                     b                     c  #>             \"Bowdich\" \"Fischer de Waldheim\"                \"Oken\"  #>                     d                     e                     f  #>                  \"L.\"                  \"L.\" \"Fischer de Waldheim\"  #>                     g                     h  #>                  \"L.\"                  \"L.\"  tax_date(x) #>      a      b      c      d      e      f      g      h  #> \"1821\" \"1817\" \"1816\" \"1758\" \"1758\" \"1817\" \"1758\" \"1758\"  tax_cite(x) #>  a  b  c  d  e  f  g  h  #> \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\"   # Set parts of the taxonomy vector tax_name(x) <- tolower(tax_name(x)) tax_rank(x)[1] <- NA tax_id(x) <- '9999' tax_db(x) <- 'itis' tax_auth(x) <- NA tax_author(x)[2:3] <- c('Joe', 'Billy') tax_date(x) <- c('1999', '2013', '1796', '1899',                  '1997', '2003', '1996', '1859') tax_cite(x)['c'] <- 'Linnaeus, C. (1771). Mantissa plantarum altera generum.'  # Convert to table tibble::as_tibble(x) #> # A tibble: 8 × 8 #>   supertaxon tax_name        tax_rank tax_id tax_db tax_author tax_date tax_cite #>        <int> <chr>           <chr>    <chr>  <chr>  <chr>      <chr>    <chr>    #> 1         NA carnivora       NA       9999   itis   NA         1999     NA       #> 2          1 felidae         family   9999   itis   Joe        2013     NA       #> 3          2 panthera        genus    9999   itis   Billy      1796     Linnaeu… #> 4          3 panthera leo    species  9999   itis   NA         1899     NA       #> 5          3 panthera tigris species  9999   itis   NA         1997     NA       #> 6          1 ursidae         family   9999   itis   NA         2003     NA       #> 7          6 ursus           genus    9999   itis   NA         1996     NA       #> 8          7 ursus arctos    species  9999   itis   NA         1859     NA       as_data_frame(x) #>   supertaxon        tax_name tax_rank tax_id tax_db tax_author tax_date #> 1         NA       carnivora     <NA>   9999   itis       <NA>     1999 #> 2          1         felidae   family   9999   itis        Joe     2013 #> 3          2        panthera    genus   9999   itis      Billy     1796 #> 4          3    panthera leo  species   9999   itis       <NA>     1899 #> 5          3 panthera tigris  species   9999   itis       <NA>     1997 #> 6          1         ursidae   family   9999   itis       <NA>     2003 #> 7          6           ursus    genus   9999   itis       <NA>     1996 #> 8          7    ursus arctos  species   9999   itis       <NA>     1859 #>                                                  tax_cite #> 1                                                    <NA> #> 2                                                    <NA> #> 3 Linnaeus, C. (1771). Mantissa plantarum altera generum. #> 4                                                    <NA> #> 5                                                    <NA> #> 6                                                    <NA> #> 7                                                    <NA> #> 8                                                    <NA>  # Get taxonomy attributes subtaxa(x) #> $a #> b c d e f g h  #> 2 3 4 5 6 7 8  #>  #> $b #> c d e  #> 3 4 5  #>  #> $c #> d e  #> 4 5  #>  #> $d #> named integer(0) #>  #> $e #> named integer(0) #>  #> $f #> g h  #> 7 8  #>  #> $g #> h  #> 8  #>  #> $h #> named integer(0) #>  subtaxa(x, value = tax_name(x)) #> $a #>                 b                 c                 d                 e  #>         \"felidae\"        \"panthera\"    \"panthera leo\" \"panthera tigris\"  #>                 f                 g                 h  #>         \"ursidae\"           \"ursus\"    \"ursus arctos\"  #>  #> $b #>                 c                 d                 e  #>        \"panthera\"    \"panthera leo\" \"panthera tigris\"  #>  #> $c #>                 d                 e  #>    \"panthera leo\" \"panthera tigris\"  #>  #> $d #> named character(0) #>  #> $e #> named character(0) #>  #> $f #>              g              h  #>        \"ursus\" \"ursus arctos\"  #>  #> $g #>              h  #> \"ursus arctos\"  #>  #> $h #> named character(0) #>  subtaxa(x, value = as_taxon(x)) #> $a #> <taxon[7]> #>                                    b                                    c  #>         9999|felidae Joe 2013|family       9999|panthera Billy 1796|genus  #>                                    d                                    e  #>    9999|panthera leo NA 1899|species 9999|panthera tigris NA 1997|species  #>                                    f                                    g  #>          9999|ursidae NA 2003|family             9999|ursus NA 1996|genus  #>                                    h  #>    9999|ursus arctos NA 1859|species  #> Rank levels: order < family < genus < species #>  #> $b #> <taxon[3]> #>                                    c                                    d  #>       9999|panthera Billy 1796|genus    9999|panthera leo NA 1899|species  #>                                    e  #> 9999|panthera tigris NA 1997|species  #> Rank levels: order < family < genus < species #>  #> $c #> <taxon[2]> #>                                    d                                    e  #>    9999|panthera leo NA 1899|species 9999|panthera tigris NA 1997|species  #> Rank levels: order < family < genus < species #>  #> $d #> <taxon[0]> #> Rank levels: order < family < genus < species #>  #> $e #> <taxon[0]> #> Rank levels: order < family < genus < species #>  #> $f #> <taxon[2]> #>                                 g                                 h  #>          9999|ursus NA 1996|genus 9999|ursus arctos NA 1859|species  #> Rank levels: order < family < genus < species #>  #> $g #> <taxon[1]> #>                                 h  #> 9999|ursus arctos NA 1859|species  #> Rank levels: order < family < genus < species #>  #> $h #> <taxon[0]> #> Rank levels: order < family < genus < species #>  n_subtaxa(x) #> a b c d e f g h  #> 7 3 2 0 0 2 1 0  supertaxa(x) #> $a #> named integer(0) #>  #> $b #> a  #> 1  #>  #> $c #> b a  #> 2 1  #>  #> $d #> c b a  #> 3 2 1  #>  #> $e #> c b a  #> 3 2 1  #>  #> $f #> a  #> 1  #>  #> $g #> f a  #> 6 1  #>  #> $h #> g f a  #> 7 6 1  #>  n_supertaxa(x) #> a b c d e f g h  #> 0 1 2 3 3 1 2 3  leaves(x) #> $a #> d e h  #> 4 5 8  #>  #> $b #> d e  #> 4 5  #>  #> $c #> d e  #> 4 5  #>  #> $d #> named integer(0) #>  #> $e #> named integer(0) #>  #> $f #> h  #> 8  #>  #> $g #> h  #> 8  #>  #> $h #> named integer(0) #>  n_leaves(x) #> a b c d e f g h  #> 3 2 2 0 0 1 1 0  is_leaf(x) #>     a     b     c     d     e     f     g     h  #> FALSE FALSE FALSE  TRUE  TRUE FALSE FALSE  TRUE  stems(x) #> $a #> named integer(0) #>  is_stem(x) #>     a     b     c     d     e     f     g     h  #> FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE  roots(x) #> a  #> 1  is_root(x) #>     a     b     c     d     e     f     g     h  #>  TRUE FALSE FALSE FALSE FALSE FALSE FALSE FALSE  internodes(x) #> b f g  #> 2 6 7  is_internode(x) #>     a     b     c     d     e     f     g     h  #> FALSE  TRUE FALSE FALSE FALSE  TRUE  TRUE FALSE"},{"path":"https://docs.ropensci.org/taxa/reference/unname_fields.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove names from fields in a vctrs rcrd — unname_fields","title":"Remove names from fields in a vctrs rcrd — unname_fields","text":"Remove names fields vctrs rcrd","code":""},{"path":"https://docs.ropensci.org/taxa/reference/unname_fields.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove names from fields in a vctrs rcrd — unname_fields","text":"","code":"unname_fields(x)"},{"path":"https://docs.ropensci.org/taxa/reference/unname_fields.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove names from fields in a vctrs rcrd — unname_fields","text":"x vctrs rcrd","code":""},{"path":"https://docs.ropensci.org/taxa/news/index.html","id":"taxa-043","dir":"Changelog","previous_headings":"","what":"taxa 0.4.3","title":"taxa 0.4.3","text":"CRAN release: 2024-02-20 Fixing minor CRAN check issues.","code":""},{"path":"https://docs.ropensci.org/taxa/news/index.html","id":"taxa-042","dir":"Changelog","previous_headings":"","what":"taxa 0.4.2","title":"taxa 0.4.2","text":"CRAN release: 2022-04-12 Experimenting using '' instead NA missing values suggestion Davis Vaughan (issue #212). Fix failing CRAN tests due vctrs update.","code":""},{"path":"https://docs.ropensci.org/taxa/news/index.html","id":"taxa-041","dir":"Changelog","previous_headings":"","what":"taxa 0.4.1","title":"taxa 0.4.1","text":"CRAN release: 2022-03-11 Minor update Fixed taxonomy printing error Removed default.stringsAsFactors since depreciated.","code":""},{"path":"https://docs.ropensci.org/taxa/news/index.html","id":"taxa-040","dir":"Changelog","previous_headings":"","what":"taxa 0.4.0","title":"taxa 0.4.0","text":"CRAN release: 2021-07-13 LARGE CHANGES: beginning complete rewrite taxa package make basic component classes like base R vectors. taxmap class yet reimplemented, similar class previous versions taxa. old version taxa incorporated metacoder package version taxa mature, time metacoder also use version.","code":""},{"path":"https://docs.ropensci.org/taxa/news/index.html","id":"taxa-034","dir":"Changelog","previous_headings":"","what":"taxa 0.3.4","title":"taxa 0.3.4","text":"CRAN release: 2020-04-29","code":""},{"path":"https://docs.ropensci.org/taxa/news/index.html","id":"bug-fixes-0-3-4","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"taxa 0.3.4","text":"Fixed bug n_obs cause error used object tables columns named numbers. Various minor bug fixes","code":""},{"path":"https://docs.ropensci.org/taxa/news/index.html","id":"taxa-033","dir":"Changelog","previous_headings":"","what":"taxa 0.3.3","title":"taxa 0.3.3","text":"CRAN release: 2020-02-25","code":""},{"path":"https://docs.ropensci.org/taxa/news/index.html","id":"bug-fixes-0-3-3","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"taxa 0.3.3","text":"Numeric column names tables taxmap now supported Various small bug fixes","code":""},{"path":"https://docs.ropensci.org/taxa/news/index.html","id":"taxa-032","dir":"Changelog","previous_headings":"","what":"taxa 0.3.2","title":"taxa 0.3.2","text":"CRAN release: 2019-01-02","code":""},{"path":"https://docs.ropensci.org/taxa/news/index.html","id":"bug-fixes-0-3-2","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"taxa 0.3.2","text":"Parsers now correclty handle zero-length inputs (issue #185). taxonomy_table option add_id_col now works (issue #191).","code":""},{"path":"https://docs.ropensci.org/taxa/news/index.html","id":"improvements-0-3-2","dir":"Changelog","previous_headings":"","what":"Improvements","title":"taxa 0.3.2","text":"parse_tax_data option class_col now accepts negative column indexes, meaning “columns”.","code":""},{"path":"https://docs.ropensci.org/taxa/news/index.html","id":"taxa-031","dir":"Changelog","previous_headings":"","what":"taxa 0.3.1","title":"taxa 0.3.1","text":"CRAN release: 2018-08-08","code":""},{"path":"https://docs.ropensci.org/taxa/news/index.html","id":"new-features-0-3-1","dir":"Changelog","previous_headings":"","what":"New features","title":"taxa 0.3.1","text":"Added taxonomy_table function converts information taxmap taxonomy object table taxa rows ranks columns. Added print_tree function prints text-based trees taxmap taxonomy objects (issue #173). Added get_dataset function get single data set taxmap objects. Useful piping %>%. filter_taxa filter_obs can now subset anything names, length, can subset, just tables, lists, vectors. example, DNAbin objects ape package can now used taxmap objects (issue #178).","code":""},{"path":"https://docs.ropensci.org/taxa/news/index.html","id":"improvements-0-3-1","dir":"Changelog","previous_headings":"","what":"Improvements","title":"taxa 0.3.1","text":"Parsers somewhat faster use less RAM (issue #177). taxmap taxonomy parsers now treat taxa name place taxonomy, different ranks, database IDs, authorities, different taxa. filter_obs can now filter multiple datasets length (issue #179). select_obs arrange_obs can now work multiple datasets .","code":""},{"path":"https://docs.ropensci.org/taxa/news/index.html","id":"bug-fixes-0-3-1","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"taxa 0.3.1","text":"Made \"taxon_rank\" value class_key options work extract_tax_data. Fixed bug taxmap print method printing tables taxon ID column (issue #181).","code":""},{"path":"https://docs.ropensci.org/taxa/news/index.html","id":"changes-0-3-1","dir":"Changelog","previous_headings":"","what":"Changes","title":"taxa 0.3.1","text":"Option target many functions renamed data make intuitive.","code":""},{"path":"https://docs.ropensci.org/taxa/news/index.html","id":"taxa-021","dir":"Changelog","previous_headings":"","what":"taxa 0.2.1","title":"taxa 0.2.1","text":"CRAN release: 2018-05-03","code":""},{"path":"https://docs.ropensci.org/taxa/news/index.html","id":"improvements-0-2-1","dir":"Changelog","previous_headings":"","what":"Improvements","title":"taxa 0.2.1","text":"parse_tax_data can now incorporate rank information can accessed result$taxon_ranks() (issue #113). taxmap print methods now information color (issue #124). Added leaves_apply function works like subtaxa_apply, leaves (issue #126). Functions value option now return named taxon indexes default, instead unnamed taxon indexes (issue #128). lookup_tax_data extract_tax_data can now use “fuzzy” matching looking taxon names, taxon names can misspelled still founds. lookup_tax_data extract_tax_data now look unique sequence IDs, improving download speed. filter_obs now can filter observations non-target data sets associated taxa removed drop_taxa = TRUE (issue #143). done using filter_taxa, supertaxa, subtaxa, reassign_obs options now available filter_obs control taxon removal done. lookup_tax_data extract_tax_data now progress bars instead printing lots text downloading information. mutate_obs now creates new vector/tables data set specified exist (issue #121). Add filter_taxa option keep_order preserves input taxon order. TRUE default, changes used work. Set FALSE old behavior. Using NSE ambiguous name (appears multiple datasets) now produces warning (issue #153).","code":""},{"path":"https://docs.ropensci.org/taxa/news/index.html","id":"changes-0-2-1","dir":"Changelog","previous_headings":"","what":"Changes","title":"taxa 0.2.1","text":"simplify option many functions now always handled way: vectors list names, unique key-value pairs returned. Otherwise, names ignored unique values returned. leaves option now behaves like subtaxa, returning leaves taxon. old behavior can replicated setting new simplify option TRUE (issue #127).","code":""},{"path":"https://docs.ropensci.org/taxa/news/index.html","id":"bug-fixes-0-2-1","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"taxa 0.2.1","text":"filter_taxa now better error messages invalid inputs (issue #117). Fix bug caused error filter_taxa taxa pass filter (issue #116). Fixed bug parse_tax_data class_key named (issue #131). Fixed bug hierarchy print method taxon_id class used (issue #138). Fixed bug parse_tax_data classification data NA. Fixed bug taxmap print method printing zero-length lists vectors (issue #148).","code":""},{"path":"https://docs.ropensci.org/taxa/news/index.html","id":"taxa-020","dir":"Changelog","previous_headings":"","what":"taxa 0.2.0","title":"taxa 0.2.0","text":"CRAN release: 2017-12-19","code":""},{"path":"https://docs.ropensci.org/taxa/news/index.html","id":"bug-fixes-0-2-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"taxa 0.2.0","text":"Fixed problems using duplicated inputs subset (issue #88, issue #89) Fixed bug caused error using unnamed vectors (issue #86) Fixed bug prevents using sequence accession numbers (issue #85) Fixed bug lookup_tax_data extract_tax_data caused error one queries failed download. Fixed bug caused “data” argument obs_apply work passed variable (issue #97)","code":""},{"path":"https://docs.ropensci.org/taxa/news/index.html","id":"improvements-0-2-0","dir":"Changelog","previous_headings":"","what":"Improvements","title":"taxa 0.2.0","text":"Added map_data_ mapping without using NSE. Make default dataset n_obs n_obs_1 make available NSE (issue #91 parse_tax_data/extract_tax_data can now parse things like phylum;Nitrosopumilales;order;Nitrosopumilaceae;family; split rank taxon names using multiple matches class_regex class_sep NULL. extract_tax_data now gives warnings regex match. Added n_supertaxa_1 function get number immediate supertaxa (always 1 0). Added branches function go roots, leaves, stems. (issue #56) Added internodes is_internode functions go roots, leaves, branches, stems. Useful removing uninformative taxonomic ranks/taxa. Started incorporate ability taxon, taxon_name, taxon_id, taxon_rank, taxa handle NULL inputs first class citizens handle cases essentially blank taxon (use case comes taxize package) #95 #107 data parsers: Put long, often unused columns last (issue #93) parsing classifications per-taxon info add input id column (issue #92) New function classification abstraction get either hierarchy taxon indexes, names, ids (issue #57) New function get_data_frame Taxonomy Taxmap objects wraps around get_data coerce data.frame. (issue #58) (PR #105)","code":""},{"path":"https://docs.ropensci.org/taxa/news/index.html","id":"changes-0-2-0","dir":"Changelog","previous_headings":"","what":"Changes","title":"taxa 0.2.0","text":"output taxmap parsing functions like parse_tax_data, moved “taxon_id” “input_index” columns front “input” rear. Also “tax_data” now comes “class_data”.","code":""},{"path":"https://docs.ropensci.org/taxa/news/index.html","id":"taxa-010","dir":"Changelog","previous_headings":"","what":"taxa 0.1.0","title":"taxa 0.1.0","text":"CRAN release: 2017-07-16","code":""},{"path":"https://docs.ropensci.org/taxa/news/index.html","id":"new-features-0-1-0","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"taxa 0.1.0","text":"Released CRAN.","code":""}]
